{"version":3,"sources":["components/CompanyLogo.tsx","components/BoardColumnSelect.tsx","components/CompanySelect.tsx","views/pages/dashboard/board/AddJobDialog.tsx","views/pages/dashboard/board/BoardColumn.tsx","views/shared/JobModal/CompanyTab.tsx","views/shared/JobModal/JobInfoTab.tsx","views/shared/JobModal/NotesTab.tsx","views/shared/JobModal/index.tsx","views/pages/dashboard/board/Job.tsx","views/pages/dashboard/board/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","sm","width","spacing","height","md","lg","xl","CompanyLogo","company","size","classes","sizeClass","name","aria-label","logo","className","alt","src","loadingSelector","createLoadingSelector","types","GET_BOARD_COLUMNS","errorSelector","createErrorSelector","connector","connect","state","boardColumns","boardColumn","loading","error","dispatch","dispatchGetBoardColumns","actions","getBoardColumns","dispatchClearErrors","clearErrors","handleSelect","defaultValue","React","showToast","Autocomplete","id","onChange","_event","newBoardColumn","getOptionSelected","option","value","getOptionLabel","title","options","renderInput","params","TextField","label","variant","InputProps","endAdornment","CircularProgress","color","fullWidth","SEARCH_COMPANIES","companies","dispatchSearchCompanies","query","searchCompanies","dispatchClearCompanies","clearCompanies","selectedCompany","setSelectedCompany","freeSolo","newCompany","onInputChange","trim","disableClearable","renderOption","style","marginLeft","placeholder","type","startAdornment","InputAdornment","position","marginTop","initialState","board","selectedBoard","dashboard","dispatchCreateJob","job","createJob","open","onClose","useCustomState","setState","Dialog","maxWidth","aria-labelledby","DialogTitle","DialogContent","autoFocus","margin","e","handleInputChange","val","undefined","companyCustom","DialogActions","Button","onClick","preventDefault","fontSize","subTitle","marginBottom","column","scrollbar","BoardColumn","jobCount","children","openAddJob","setOpenAddJob","Card","CardContent","Typography","startIcon","droppableId","provided","droppableProps","ref","innerRef","editabletext","fontWeight","paddingTop","tabPanel","maxHeight","padding","paddingLeft","paddingRight","breakpoints","down","CompanyTab","Grid","container","Box","display","flexDirection","mt","mb","justifyContent","pl","description","item","readonly","rows","website","industry","foundedYear","toString","headquarters","country","sizeRange","currentEmployeeEstimate","totalEmployeeEstimate","linkedInUrl","overflow","whiteSpace","textOverflow","Link","href","target","rel","fontFamily","textareaWrapper","dispatchUpdateJob","updateJob","companyName","handleSave","data","console","log","onSave","location","address","dateApplied","postUrl","note","textAlign","dispatchCreateNote","createNote","dispatchUpdateNote","updateNote","dispatchDeleteNote","deleteNote","notes","noteTextarea","setNoteTextarea","multiline","direction","alignItems","body","boardId","jobId","length","map","key","Paper","elevation","fromNow","createdAt","withStyles","root","closeButton","right","top","palette","grey","props","other","disableTypography","IconButton","TabPanel","index","role","hidden","a11yProps","dialogPaper","minHeight","minWidth","modalContent","paddingBottom","GET_NOTES_JOB","dispatchGetNotesByJob","getNotesByJob","tabValue","setTabValue","handleClose","hasCompanyData","paper","dividers","justify","Tabs","newValue","indicatorColor","textColor","Tab","Loader","customHeight","cursor","deleteIcon","opacity","transition","hiddenDeleteIcon","cardContent","float","dispatchDeleteJob","deleteJob","hovering","setHovering","confirmDialog","useConfirmDialog","a","stopPropagation","draggableId","onMouseEnter","onMouseLeave","draggableProps","dragHandleProps","CardHeader","avatar","action","subheader","wrapper","flexWrap","overFlowY","overflowX","flex","marginRight","boardColumnTypes","jobTypes","GET_JOBS_BOARD","jobs","groupedJobs","dispatchMoveJob","prevJobId","jobActions","moveJob","dispatchMoveJobUI","oldColumn","newColumn","oldIndex","newIndex","moveJobUI","boardColumnActions","jobModal","setJobModal","memoJobModal","Boolean","hasTopbar","to","onDragEnd","res","destination","source","isEqual","offset"],"mappings":"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","file":"static/js/7.e710bf68.chunk.js","sourcesContent":["import Avatar from '@material-ui/core/Avatar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { ICompany } from '../store/models';\nimport LetterAvatar from './LetterAvatar';\n\ninterface Props {\n  company: ICompany | string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n}\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    sm: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    md: {\n      width: theme.spacing(5),\n      height: theme.spacing(5),\n    },\n    lg: {\n      width: theme.spacing(7),\n      height: theme.spacing(7),\n    },\n    xl: {\n      width: theme.spacing(10),\n      height: theme.spacing(10),\n    },\n  })\n);\n\nconst CompanyLogo: React.FC<Props> = ({ company, size }) => {\n  const classes = useStyles();\n  const sizeClass = size && classes[size];\n\n  if (typeof company === 'string') {\n    return (\n      <LetterAvatar size={size} name={company} aria-label=\"company-logo\" />\n    );\n  } else {\n    return company && company.logo ? (\n      <Avatar className={sizeClass} alt=\"companylogo\" src={company.logo} />\n    ) : (\n      <LetterAvatar size={size} name={company.name} aria-label=\"company-logo\" />\n    );\n  }\n};\n\nexport default CompanyLogo;\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { RootState } from '../store/ducks';\nimport { actions, types } from '../store/ducks/api/boardColumn';\nimport { createErrorSelector } from '../store/ducks/error';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport { showToast } from '../utils/showToast';\nimport { IBoardColumn } from '../store/models';\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  handleSelect: (boardColumn: IBoardColumn | null) => void;\n  defaultValue?: IBoardColumn;\n}\n\nconst BoardColumnSelect: React.FC<Props> = ({\n  className,\n  handleSelect,\n  defaultValue,\n  boardColumns,\n  loading,\n  error,\n  dispatchGetBoardColumns,\n  dispatchClearErrors,\n}) => {\n  React.useEffect(() => {\n    if (boardColumns === null) {\n      dispatchGetBoardColumns();\n    }\n  }, [boardColumns, dispatchGetBoardColumns]);\n\n  if (error) {\n    showToast('Error', error, 'danger', dispatchClearErrors);\n  }\n\n  return (\n    <Autocomplete\n      id=\"boardcolumn-select\"\n      onChange={(_event: any, newBoardColumn: IBoardColumn | null) => {\n        handleSelect(newBoardColumn);\n      }}\n      defaultValue={defaultValue}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.title}\n      options={boardColumns || []}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Board Column\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_BOARD_COLUMNS]);\nconst errorSelector = createErrorSelector([types.GET_BOARD_COLUMNS]);\n\nconst mapStateToProps = (state: RootState) => ({\n  boardColumns: state.boardColumn.boardColumns,\n  loading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetBoardColumns: (): ThunkVoidAction =>\n    dispatch(actions.getBoardColumns()),\n  dispatchClearErrors: (): ThunkVoidAction => dispatch(actions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(BoardColumnSelect);\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../store/ducks';\nimport { ICompany } from '../store/models';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CompanyLogo from './CompanyLogo';\nimport { actions, types } from '../store/ducks/api/company';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  onChange: (company: ICompany | string | null) => void;\n}\n\nconst CompanySelect: React.FC<Props> = ({\n  className,\n  onChange,\n  companies,\n  loading,\n  dispatchSearchCompanies,\n  dispatchClearCompanies,\n}) => {\n  const [selectedCompany, setSelectedCompany] = React.useState<\n    ICompany | string | null\n  >(null);\n\n  const applyFilter = (query: string) => {\n    if (query.trim() === '') {\n      dispatchClearCompanies();\n    } else {\n      dispatchSearchCompanies(query);\n    }\n  };\n\n  return (\n    <Autocomplete\n      id=\"company-select\"\n      freeSolo\n      onChange={(_event: any, newCompany: ICompany | string) => {\n        if (typeof newCompany !== 'string') {\n          setSelectedCompany(newCompany);\n          onChange(newCompany);\n        }\n      }}\n      onInputChange={(_event: any, value: string) => {\n        applyFilter(value);\n        setSelectedCompany(value);\n        onChange(value);\n      }}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.name}\n      options={companies || []}\n      loading={loading}\n      disableClearable\n      renderOption={(option) => (\n        <React.Fragment>\n          <CompanyLogo company={option} />\n          <span style={{ marginLeft: '5px' }}>{option.name}</span>\n        </React.Fragment>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Company\"\n          placeholder=\"Enter a company name...\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            type: 'search',\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                {!!selectedCompany && typeof selectedCompany !== 'string' ? (\n                  <CompanyLogo company={selectedCompany} />\n                ) : (\n                  <BusinessIcon />\n                )}\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.SEARCH_COMPANIES]);\n\nconst mapStateToProps = (state: RootState) => ({\n  companies: state.company.companies,\n  loading: loadingSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchSearchCompanies: (query: string): ThunkVoidAction =>\n    dispatch(actions.searchCompanies(query)),\n  dispatchClearCompanies: (): ThunkVoidAction =>\n    dispatch(actions.clearCompanies()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(CompanySelect);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport BoardColumnSelect from '../../../../components/BoardColumnSelect';\nimport CompanySelect from '../../../../components/CompanySelect';\nimport { RootState } from '../../../../store/ducks';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { IBoardColumn, ICompany, IJobInput } from '../../../../store/models';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  handleInputChange,\n  useCustomState,\n} from '../../../../utils/customHooks';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    marginTop: {\n      marginTop: theme.spacing(3),\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  boardColumn: IBoardColumn;\n  onClose: () => void;\n}\n\nconst initialState: IJobInput = {\n  board: '',\n  title: '',\n  boardColumn: '',\n};\nconst AddJobDialog: React.FC<Props> = ({\n  open,\n  boardColumn,\n  onClose,\n  selectedBoard,\n  dispatchCreateJob,\n}) => {\n  const classes = useStyles();\n  const [state, setState] = useCustomState(initialState);\n  React.useEffect(() => {\n    if (open && !!selectedBoard && !!boardColumn) {\n      setState({ board: selectedBoard.id, boardColumn: boardColumn.id });\n    }\n  }, [boardColumn, open, selectedBoard, setState]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    dispatchCreateJob(state as IJobInput);\n    setState(initialState);\n    onClose();\n  };\n\n  const handleSelectCompany = (val: ICompany | string | null) => {\n    if (typeof val === 'string') {\n      setState({\n        company: undefined,\n        companyCustom: val,\n      });\n    } else {\n      setState({\n        company: (val && val.id) || '',\n        companyCustom: undefined,\n      });\n    }\n  };\n\n  const handleSelectBoardColumn = (boardColumn: IBoardColumn | null) => {\n    setState({\n      boardColumn: (boardColumn && boardColumn.id) || '',\n    });\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"sm\"\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Add Job</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          name=\"title\"\n          label=\"Job Title\"\n          type=\"text\"\n          onChange={(e) => {\n            handleInputChange(e, setState);\n          }}\n          fullWidth\n        />\n        <CompanySelect\n          className={classes.marginTop}\n          onChange={handleSelectCompany}\n        />\n        <BoardColumnSelect\n          className={classes.marginTop}\n          handleSelect={handleSelectBoardColumn}\n          defaultValue={boardColumn}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"default\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} color=\"primary\">\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchCreateJob: (job: IJobInput): ThunkVoidAction =>\n    dispatch(actions.createJob(job)),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(AddJobDialog);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Droppable, DroppableProvided } from 'react-beautiful-dnd';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { IBoardColumn } from '../../../../store/models';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddJobDialog from './AddJobDialog';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    title: {\n      fontSize: 16,\n    },\n    subTitle: {\n      fontSize: 14,\n      marginBottom: 12,\n    },\n    marginTop: {\n      marginTop: theme.spacing(1),\n    },\n    column: {\n      height: '65vh',\n      ...theme.scrollbar,\n    },\n  })\n);\n\ninterface Props {\n  boardColumn: IBoardColumn;\n  jobCount: number;\n  children: any;\n}\n\nconst BoardColumn: React.FC<Props> = ({ boardColumn, jobCount, children }) => {\n  const [openAddJob, setOpenAddJob] = React.useState<boolean>(false);\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AddJobDialog\n        open={openAddJob}\n        onClose={() => {\n          setOpenAddJob(false);\n        }}\n        boardColumn={boardColumn}\n      />\n      <Card>\n        <CardContent>\n          <Typography className={classes.title} color=\"textPrimary\">\n            {boardColumn.title}\n          </Typography>\n          <Typography className={classes.subTitle} color=\"textSecondary\">\n            {jobCount} job{jobCount !== 1 && 's'}\n          </Typography>\n          <Button\n            onClick={() => setOpenAddJob(true)}\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<AddIcon />}\n            fullWidth\n          >\n            ADD JOB\n          </Button>\n          <Droppable droppableId={boardColumn.id}>\n            {(provided: DroppableProvided) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                className={classes.marginTop}\n              >\n                <div className={classes.column}>\n                  {children}\n                  {provided.placeholder}\n                </div>\n              </div>\n            )}\n          </Droppable>\n        </CardContent>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default BoardColumn;\n","import * as React from 'react';\nimport Link from '@material-ui/core/Link';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport CompanyLogo from '../../../components/CompanyLogo';\nimport Typography from '@material-ui/core/Typography';\nimport { EditText, EditTextarea } from 'react-edit-text';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { ICompany } from '../../../store/models';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    editabletext: {\n      fontSize: '16px',\n      fontWeight: 400,\n    },\n    label: {\n      paddingTop: '6px',\n      fontSize: '16px',\n      fontWeight: 600,\n    },\n    tabPanel: {\n      maxHeight: '45vh',\n      padding: '5px',\n      paddingLeft: '25px',\n      paddingRight: '25px',\n      [theme.breakpoints.down('sm')]: {\n        maxHeight: '50vh',\n      },\n    },\n    scrollbar: {\n      height: '45vh',\n      ...theme.scrollbar,\n    },\n  })\n);\n\ninterface Props {\n  company: ICompany;\n}\n\nconst CompanyTab: React.FC<Props> = ({ company }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.scrollbar}>\n      <Grid container spacing={1} className={classes.tabPanel}>\n        <Grid container spacing={1}>\n          <Box display=\"flex\" flexDirection=\"row\" mt={2} mb={1}>\n            <CompanyLogo company={company} size=\"md\" />\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              pl={2}\n            >\n              <Typography color=\"textPrimary\" variant=\"h5\">\n                {company.name}\n              </Typography>\n            </Box>\n          </Box>\n        </Grid>\n        {company.description && (\n          <Grid container spacing={1}>\n            <Grid item sm={12}>\n              <EditTextarea\n                className={classes.editabletext}\n                value={company.description}\n                readonly\n                rows={4}\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.type && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Type:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.type}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.website && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Website:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.website}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.industry && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Industry:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.industry}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.foundedYear && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Founded:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.foundedYear.toString()}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.headquarters && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Headquarters:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.headquarters}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.country && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Country:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.country}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.sizeRange && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Company size:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.sizeRange + ' employees'}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.currentEmployeeEstimate && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Current employees:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.currentEmployeeEstimate + ' employees est.'}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.totalEmployeeEstimate && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Total employees:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.totalEmployeeEstimate + ' employees est.'}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.linkedInUrl && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                LinkedIn Page:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <Typography\n                className={classes.label}\n                style={{\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  textOverflow: 'ellipsis',\n                }}\n              >\n                <Link\n                  href={'https://' + company.linkedInUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  https://{company.linkedInUrl}\n                </Link>\n              </Typography>\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n};\n\nexport default CompanyTab;\n","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { EditText, EditTextarea, onSaveProps } from 'react-edit-text';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { IJob, IJobUpdate } from '../../../store/models';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { actions } from '../../../store/ducks/api/job';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    tabPanel: {\n      maxHeight: '45vh',\n      padding: '5px',\n      paddingLeft: '25px',\n      paddingRight: '25px',\n      [theme.breakpoints.down('sm')]: {\n        maxHeight: '50vh',\n      },\n    },\n    editabletext: {\n      fontFamily: 'Roboto',\n      fontSize: '16px',\n      fontWeight: 400,\n    },\n    label: {\n      paddingTop: '6px',\n      fontSize: '16px',\n      fontWeight: 600,\n    },\n    textareaWrapper: {\n      paddingTop: '10px !important',\n    },\n    scrollbar: {\n      height: '45vh',\n      ...theme.scrollbar,\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  job: IJob;\n}\n\nconst JobInfoTab: React.FC<Props> = ({ job, dispatchUpdateJob }) => {\n  const classes = useStyles();\n  const companyName = !!job\n    ? typeof job.company === 'string'\n      ? job.company\n      : job.company.name\n    : '';\n\n  const handleSave = (data: onSaveProps) => {\n    const { name, value } = data;\n    if (job) {\n      dispatchUpdateJob(job.id, { [name]: value });\n    }\n  };\n\n  const handleSaveAddress = (data: onSaveProps) => {\n    const { value } = data;\n    if (job) {\n      dispatchUpdateJob(job.id, { location: { address: value } });\n    }\n  };\n\n  console.log(job.description);\n\n  return (\n    <div className={classes.scrollbar}>\n      <Grid className={classes.tabPanel} container spacing={1}>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography className={classes.label}>Company:</Typography>\n          </Grid>\n          <Grid item sm={9}>\n            <EditText\n              className={classes.editabletext}\n              value={companyName}\n              readonly\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography className={classes.label}>Job Title:</Typography>\n          </Grid>\n          <Grid item sm={9}>\n            <EditText\n              className={classes.editabletext}\n              name=\"title\"\n              value={job.title}\n              placeholder=\"Enter a value\"\n              onSave={handleSave}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography className={classes.label}>Address:</Typography>\n          </Grid>\n          <Grid item sm={9}>\n            <EditText\n              className={classes.editabletext}\n              name=\"address\"\n              value={job.location && job.location.address}\n              placeholder=\"Enter a value\"\n              onSave={handleSaveAddress}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography className={classes.label}>Date Applied:</Typography>\n          </Grid>\n          <Grid item sm={9}>\n            <EditText\n              type=\"date\"\n              className={classes.editabletext}\n              name=\"dateApplied\"\n              value={job.dateApplied}\n              placeholder=\"Enter a value\"\n              onSave={handleSave}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography className={classes.label}>Post URL:</Typography>\n          </Grid>\n          <Grid item sm={9}>\n            <EditText\n              className={classes.editabletext}\n              name=\"postUrl\"\n              value={job.postUrl}\n              placeholder=\"Enter a value\"\n              onSave={handleSave}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography\n              className={classes.label}\n              style={{ paddingTop: '12px' }}\n            >\n              Description:\n            </Typography>\n          </Grid>\n          <Grid item sm={9} className={classes.textareaWrapper}>\n            <EditTextarea\n              name=\"description\"\n              className={classes.editabletext}\n              value={job.description}\n              placeholder=\"Enter a value\"\n              onSave={handleSave}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchUpdateJob: (id: string, job: IJobUpdate): ThunkVoidAction =>\n    dispatch(actions.updateJob(id, job)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(JobInfoTab);\n","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { IJob, INote, INoteInput, INoteUpdate } from '../../../store/models';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { showToast } from '../../../utils/showToast';\nimport Paper from '@material-ui/core/Paper';\nimport Moment from 'react-moment';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { actions } from '../../../store/ducks/api/note';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    tabPanel: {\n      maxHeight: '45vh',\n      padding: '5px',\n      paddingLeft: '25px',\n      paddingRight: '25px',\n      [theme.breakpoints.down('sm')]: {\n        maxHeight: '50vh',\n      },\n    },\n    note: {\n      padding: theme.spacing(2),\n      '& div:nth-child(1)': {\n        fontSize: '14px',\n      },\n      '& div:nth-child(2)': {\n        textAlign: 'right',\n        fontSize: '12px',\n        color: '#929292',\n        marginTop: theme.spacing(2),\n      },\n    },\n    paddingTop: {\n      paddingTop: theme.spacing(2),\n    },\n    marginTop: {\n      marginTop: theme.spacing(1),\n    },\n    scrollbar: {\n      height: '45vh',\n      ...theme.scrollbar,\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  job: IJob;\n  notes: INote[] | null;\n}\n\nconst NotesTab: React.FC<Props> = ({ job, notes, dispatchCreateNote }) => {\n  const classes = useStyles();\n  const [noteTextarea, setNoteTextarea] = React.useState('');\n\n  const handleChangeNote = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setNoteTextarea(e.target.value);\n  };\n\n  const handleSaveNote = () => {\n    if (noteTextarea.trim() !== '') {\n      dispatchCreateNote({\n        body: noteTextarea,\n        boardId: job.board.id,\n        jobId: job.id,\n      });\n      setNoteTextarea('');\n      showToast('Success!', 'Note has been added.', 'success');\n    } else {\n      showToast('Please try again', 'Note is empty.', 'warning');\n    }\n  };\n\n  return (\n    <div className={classes.scrollbar}>\n      <Grid className={classes.tabPanel} container spacing={1}>\n        <Grid container spacing={1}>\n          <Grid item sm={12} className={classes.marginTop}>\n            <TextField\n              fullWidth\n              id=\"outlined-multiline-static\"\n              label=\"Enter a note\"\n              multiline\n              rows={4}\n              onChange={handleChangeNote}\n              value={noteTextarea}\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} direction=\"column\" alignItems=\"flex-end\">\n          <Grid item sm={12} className={classes.marginTop}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleSaveNote}\n            >\n              Save Note\n            </Button>\n          </Grid>\n        </Grid>\n        <Grid className={classes.paddingTop} container spacing={1}>\n          {notes &&\n            notes.length > 0 &&\n            notes.map((note: INote) => (\n              <Grid item sm={12} key={note.id}>\n                <Paper className={classes.note} elevation={2}>\n                  <div>{note.body}</div>\n                  <div>\n                    <Moment fromNow>{note.createdAt}</Moment>\n                  </div>\n                </Paper>\n              </Grid>\n            ))}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchCreateNote: (note: INoteInput): ThunkVoidAction =>\n    dispatch(actions.createNote(note)),\n  dispatchUpdateNote: (id: string, note: INoteUpdate): ThunkVoidAction =>\n    dispatch(actions.updateNote(id, note)),\n  dispatchDeleteNote: (id: string): ThunkVoidAction =>\n    dispatch(actions.deleteNote(id)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(NotesTab);\n","import * as React from 'react';\nimport { ICompany, IJob } from '../../../store/models';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport CompanyLogo from '../../../components/CompanyLogo';\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport CompanyTab from './CompanyTab';\nimport JobInfoTab from './JobInfoTab';\nimport NotesTab from './NotesTab';\nimport { createLoadingSelector } from '../../../store/ducks/loading';\nimport { actions, types } from '../../../store/ducks/api/note';\nimport { RootState } from '../../../store/ducks';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Loader from '../../../components/Loader';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && <React.Fragment>{children}</React.Fragment>}\n    </div>\n  );\n};\n\nconst a11yProps = (index: any) => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  };\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    dialogPaper: {\n      minHeight: '75vh',\n      maxHeight: '75vh',\n      minWidth: '650px',\n      maxWidth: '650px',\n      [theme.breakpoints.down('sm')]: {\n        minHeight: '80vh',\n        maxHeight: '80vh',\n        minWidth: '80vw',\n        maxWidth: '80vw',\n      },\n    },\n    modalContent: {\n      paddingBottom: theme.spacing(4),\n    },\n    paddingBottom: {\n      paddingBottom: theme.spacing(2),\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  job: IJob | null;\n  onClose: () => void;\n}\n\nconst JobModal: React.FC<Props> = ({\n  open,\n  onClose,\n  job,\n  loading,\n  notes,\n  dispatchGetNotesByJob,\n}) => {\n  const classes = useStyles();\n  const [tabValue, setTabValue] = React.useState(0);\n\n  React.useEffect(() => {\n    if (job) {\n      dispatchGetNotesByJob(job.id);\n    }\n  }, [dispatchGetNotesByJob, job]);\n\n  const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleClose = () => {\n    setTabValue(0);\n    onClose();\n  };\n\n  const hasCompanyData = !!job ? typeof job.company !== 'string' : false;\n  let company: ICompany | null = null;\n  if (hasCompanyData) {\n    company = job && (job.company as ICompany);\n  }\n  const companyName = job\n    ? typeof job.company === 'string'\n      ? job.company\n      : job.company.name\n    : '';\n\n  return (\n    job && (\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"job-modal\"\n        classes={{ paper: classes.dialogPaper }}\n      >\n        <DialogTitle id=\"job-modal\" onClose={handleClose}>\n          {' '}\n        </DialogTitle>\n        <DialogContent className={classes.modalContent} dividers>\n          <Grid\n            className={classes.paddingBottom}\n            container\n            spacing={3}\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <CompanyLogo company={job.company} size=\"xl\" />\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\" color=\"textPrimary\">\n                {companyName}\n              </Typography>\n              <Typography variant=\"h6\" color=\"textSecondary\">\n                {job.title}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Tabs\n            className={classes.paddingBottom}\n            value={tabValue}\n            onChange={handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label=\"Job Info\" {...a11yProps(0)} />\n            <Tab label=\"Notes\" {...a11yProps(1)} />\n            {hasCompanyData && <Tab label=\"Company\" {...a11yProps(2)} />}\n          </Tabs>\n          <TabPanel value={tabValue} index={0}>\n            <JobInfoTab job={job} />\n          </TabPanel>\n          <TabPanel value={tabValue} index={1}>\n            {loading ? (\n              <Loader customHeight=\"40vh\" />\n            ) : (\n              <NotesTab notes={notes} job={job} />\n            )}\n          </TabPanel>\n          {hasCompanyData && !!company && (\n            <TabPanel value={tabValue} index={2}>\n              <CompanyTab company={company} />\n            </TabPanel>\n          )}\n        </DialogContent>\n      </Dialog>\n    )\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_NOTES_JOB]);\nconst mapStateToProps = (state: RootState) => ({\n  notes: state.note.notes,\n  loading: loadingSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetNotesByJob: (jobId: string): ThunkVoidAction =>\n    dispatch(actions.getNotesByJob(jobId)),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(JobModal);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Draggable, DraggableProvided } from 'react-beautiful-dnd';\nimport { IJob } from '../../../../store/models';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Moment from 'react-moment';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useConfirmDialog } from '../../../../utils/ConfirmDialogProvider';\nimport CompanyLogo from '../../../../components/CompanyLogo';\n\nconst useStyles = makeStyles({\n  root: {\n    cursor: 'grab',\n    marginBottom: '5px',\n  },\n  deleteIcon: {\n    opacity: 1,\n    transition: '0.3s',\n  },\n  hiddenDeleteIcon: {\n    opacity: 0,\n  },\n  title: {\n    fontSize: '16px',\n    fontWeight: 500,\n  },\n  subTitle: {\n    fontSize: '14px',\n  },\n  cardContent: {\n    padding: 0,\n  },\n  createdAt: {\n    float: 'right',\n    fontSize: '12px',\n    color: '#929292',\n    fontWeight: 200,\n  },\n});\n\ninterface Props extends PropsFromRedux {\n  job: IJob;\n  index: number;\n}\n\nconst Job: React.FC<Props> = ({ job, index, dispatchDeleteJob }) => {\n  const classes = useStyles();\n  const [hovering, setHovering] = React.useState(false);\n  const confirmDialog = useConfirmDialog();\n\n  const deleteJob = async (e: React.MouseEvent<{}, MouseEvent>, job: IJob) => {\n    e.stopPropagation();\n    const shouldDelete = await confirmDialog({\n      variant: 'danger',\n      title: 'Are you sure?',\n      description: 'Do you wish to delete the job?',\n    });\n    if (shouldDelete) {\n      dispatchDeleteJob(job);\n    }\n  };\n\n  return (\n    <Draggable draggableId={job.id} index={index}>\n      {(provided: DraggableProvided) => (\n        <Card\n          onMouseEnter={() => setHovering(true)}\n          onMouseLeave={() => setHovering(false)}\n          className={classes.root}\n          innerRef={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <CardContent>\n            <CardHeader\n              avatar={<CompanyLogo company={job.company} />}\n              action={\n                <IconButton\n                  className={\n                    hovering ? classes.deleteIcon : classes.hiddenDeleteIcon\n                  }\n                  aria-label=\"delete\"\n                  onClick={(e) => {\n                    deleteJob(e, job);\n                  }}\n                >\n                  <DeleteOutlineIcon />\n                </IconButton>\n              }\n              title={\n                <span className={classes.title}>\n                  {typeof job.company === 'string'\n                    ? job.company\n                    : job.company.name}\n                </span>\n              }\n              subheader={<span className={classes.subTitle}>{job.title}</span>}\n            />\n            <CardContent className={classes.cardContent}>\n              <span className={classes.createdAt}>\n                Added <Moment fromNow>{job.createdAt}</Moment>\n              </span>\n            </CardContent>\n          </CardContent>\n        </Card>\n      )}\n    </Draggable>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchDeleteJob: (job: IJob): ThunkVoidAction =>\n    dispatch(actions.deleteJob(job)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Job);\n","import * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../store/ducks';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  actions as boardColumnActions,\n  types as boardColumnTypes,\n} from '../../../../store/ducks/api/boardColumn';\nimport {\n  actions as jobActions,\n  types as jobTypes,\n} from '../../../../store/ducks/api/job';\nimport { createLoadingSelector } from '../../../../store/ducks/loading';\nimport { createErrorSelector } from '../../../../store/ducks/error';\nimport Loader from '../../../../components/Loader';\nimport { Redirect } from 'react-router-dom';\nimport BoardColumn from './BoardColumn';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport JobModal from '../../../shared/JobModal';\nimport Job from './Job';\nimport { IJob } from '../../../../store/models';\nimport { isEqual } from 'lodash';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(2),\n      marginBottom: 0,\n    },\n    wrapper: {\n      display: 'flex',\n      flexWrap: 'nowrap',\n      paddingBottom: '10px',\n      ...theme.scrollbar,\n      overFlowY: 'hidden',\n      overflowX: 'auto',\n    },\n    column: {\n      width: '370px',\n      flex: '0 0 auto',\n      marginRight: theme.spacing(2),\n    },\n  })\n);\nconst Board: React.FC<PropsFromRedux> = ({\n  selectedBoard,\n  jobs,\n  boardColumns,\n  loading,\n  error,\n  dispatchMoveJob,\n  dispatchMoveJobUI,\n  dispatchClearErrors,\n}) => {\n  const [jobModal, setJobModal] = React.useState<IJob | null>(null);\n  const classes = useStyles();\n\n  const handleDragEnd = (res: DropResult) => {\n    const { destination, source, draggableId } = res;\n    if (destination && !isEqual(source, destination)) {\n      const boardColumn = destination.droppableId;\n      const offset = destination.droppableId === source.droppableId ? 0 : -1;\n      const prevJobId =\n        destination.index > 0\n          ? jobs[boardColumn][destination.index + offset].id\n          : undefined;\n      dispatchMoveJobUI(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index\n      );\n      dispatchMoveJob(draggableId, boardColumn, prevJobId);\n    }\n  };\n\n  const memoJobModal = React.useMemo(\n    () => (\n      <JobModal\n        open={Boolean(jobModal)}\n        job={jobModal}\n        onClose={() => {\n          setJobModal(null);\n        }}\n      />\n    ),\n    [jobModal]\n  );\n\n  if (loading) {\n    return <Loader hasTopbar />;\n  } else if (selectedBoard === null) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <div className={classes.wrapper}>\n          <React.Fragment>{memoJobModal}</React.Fragment>\n          {boardColumns &&\n            boardColumns.length > 0 &&\n            boardColumns.map((boardColumn) => (\n              <div key={boardColumn.id} className={classes.column}>\n                <BoardColumn\n                  boardColumn={boardColumn}\n                  jobCount={\n                    jobs && jobs[boardColumn.id]\n                      ? jobs[boardColumn.id].length\n                      : 0\n                  }\n                >\n                  {jobs &&\n                    jobs[boardColumn.id] &&\n                    jobs[boardColumn.id].map((job: IJob, index: number) => (\n                      <div\n                        id={job.id}\n                        key={job.id}\n                        onClick={() => {\n                          setJobModal(job);\n                        }}\n                      >\n                        <Job job={job} index={index} />\n                      </div>\n                    ))}\n                </BoardColumn>\n              </div>\n            ))}\n        </div>\n      </DragDropContext>\n    </div>\n  );\n};\n\nconst loadingSelector = createLoadingSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\nconst errorSelector = createErrorSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n  jobs: state.job.groupedJobs,\n  boardColumns: state.boardColumn.boardColumns,\n  loading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchMoveJob: (\n    id: string,\n    boardColumn: string,\n    prevJobId?: string\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJob(id, boardColumn, prevJobId)),\n  dispatchMoveJobUI: (\n    oldColumn: string,\n    newColumn: string,\n    oldIndex: number,\n    newIndex: number\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJobUI(oldColumn, newColumn, oldIndex, newIndex)),\n  dispatchClearErrors: (): ThunkVoidAction =>\n    dispatch(boardColumnActions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Board);\n"],"sourceRoot":""}