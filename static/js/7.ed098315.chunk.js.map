{"version":3,"sources":["components/CompanyLogo.tsx","components/BoardColumnSelect.tsx","components/CompanySelect.tsx","views/pages/dashboard/board/AddJobDialog.tsx","views/pages/dashboard/board/BoardColumn.tsx","views/pages/dashboard/board/JobModal.tsx","views/pages/dashboard/board/Job.tsx","views/pages/dashboard/board/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","sm","width","spacing","height","md","lg","xl","CompanyLogo","company","size","classes","sizeClass","logo","className","alt","src","name","aria-label","loadingSelector","createLoadingSelector","types","GET_BOARD_COLUMNS","errorSelector","createErrorSelector","connector","connect","state","boardColumns","boardColumn","loading","error","dispatch","dispatchGetBoardColumns","actions","getBoardColumns","dispatchClearErrors","clearErrors","handleSelect","defaultValue","React","showToast","Autocomplete","id","onChange","_event","newBoardColumn","getOptionSelected","option","value","getOptionLabel","title","options","renderInput","params","TextField","label","variant","InputProps","endAdornment","CircularProgress","color","fullWidth","renderRow","props","data","index","style","top","OuterElementContext","OuterElementType","ref","outerProps","ListboxComponent","children","other","itemData","toArray","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","type","ListSubheader","gridRef","current","resetAfterIndex","useResetCache","Provider","map","reduce","a","b","outerElementType","innerElementType","overscanCount","renderGroup","key","component","group","GET_COMPANIES","companies","dispatchGetCompanies","getCompanies","selectedCompany","setSelectedCompany","newCompany","disableListWrap","placeholder","startAdornment","InputAdornment","position","marginTop","initialState","board","selectedBoard","dashboard","dispatchCreateJob","job","createJob","open","onClose","useCustomState","setState","Dialog","maxWidth","aria-labelledby","DialogTitle","DialogContent","autoFocus","margin","e","handleInputChange","DialogActions","Button","onClick","preventDefault","fontSize","subTitle","marginBottom","column","BoardColumn","jobCount","openAddJob","setOpenAddJob","Card","CardContent","Typography","startIcon","droppableId","provided","droppableProps","innerRef","withStyles","root","padding","closeButton","right","palette","grey","disableTypography","IconButton","TabPanel","role","hidden","a11yProps","modalContent","paddingBottom","paddingTop","fontWeight","editabletext","textareaWrapper","textarea","noteTextarea","fontFamily","dispatchUpdateJob","updateJob","setValue","handleSave","dividers","Grid","container","direction","justify","alignItems","item","Tabs","newValue","indicatorColor","textColor","Tab","readonly","onSave","location","address","dateApplied","postUrl","multiline","rows","description","DialogContentText","cursor","deleteIcon","opacity","transition","hiddenDeleteIcon","cardContent","createdAt","float","dispatchDeleteJob","deleteJob","hovering","setHovering","confirmDialog","useConfirmDialog","stopPropagation","draggableId","onMouseEnter","onMouseLeave","draggableProps","dragHandleProps","CardHeader","avatar","action","subheader","fromNow","wrapper","display","flexWrap","flex","marginRight","boardColumnTypes","jobTypes","GET_JOBS_BOARD","jobs","groupedJobs","dispatchMoveJob","prevJobId","jobActions","moveJob","dispatchMoveJobUI","oldColumn","newColumn","oldIndex","newIndex","moveJobUI","boardColumnActions","jobModal","setJobModal","memoJobModal","Boolean","Loader","to","onDragEnd","res","destination","source","isEqual","offset","undefined"],"mappings":"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","file":"static/js/7.ed098315.chunk.js","sourcesContent":["import Avatar from '@material-ui/core/Avatar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { ICompany } from '../store/models';\nimport LetterAvatar from './LetterAvatar';\n\ninterface Props {\n  company: ICompany;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n}\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    sm: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    md: {\n      width: theme.spacing(5),\n      height: theme.spacing(5),\n    },\n    lg: {\n      width: theme.spacing(7),\n      height: theme.spacing(7),\n    },\n    xl: {\n      width: theme.spacing(10),\n      height: theme.spacing(10),\n    },\n  })\n);\n\nconst CompanyLogo: React.FC<Props> = ({ company, size }) => {\n  const classes = useStyles();\n  const sizeClass = size && classes[size];\n\n  return company && company.logo ? (\n    <Avatar className={sizeClass} alt=\"companylogo\" src={company.logo} />\n  ) : (\n    <LetterAvatar size={size} name={company.name} aria-label=\"company-logo\" />\n  );\n};\n\nexport default CompanyLogo;\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { RootState } from '../store/ducks';\nimport { actions, types } from '../store/ducks/api/boardColumn';\nimport { createErrorSelector } from '../store/ducks/error';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport { showToast } from '../utils/showToast';\nimport { IBoardColumn } from '../store/models';\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  handleSelect: (boardColumn: IBoardColumn | null) => void;\n  defaultValue?: IBoardColumn;\n}\n\nconst BoardColumnSelect: React.FC<Props> = ({\n  className,\n  handleSelect,\n  defaultValue,\n  boardColumns,\n  loading,\n  error,\n  dispatchGetBoardColumns,\n  dispatchClearErrors,\n}) => {\n  React.useEffect(() => {\n    if (boardColumns === null) {\n      dispatchGetBoardColumns();\n    }\n  }, [boardColumns, dispatchGetBoardColumns]);\n\n  if (error) {\n    showToast('Error', error, 'danger', dispatchClearErrors);\n  }\n\n  return (\n    <Autocomplete\n      id=\"boardcolumn-select\"\n      onChange={(_event: any, newBoardColumn: IBoardColumn | null) => {\n        handleSelect(newBoardColumn);\n      }}\n      defaultValue={defaultValue}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.title}\n      options={boardColumns || []}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Board Column\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_BOARD_COLUMNS]);\nconst errorSelector = createErrorSelector([types.GET_BOARD_COLUMNS]);\n\nconst mapStateToProps = (state: RootState) => ({\n  boardColumns: state.boardColumn.boardColumns,\n  loading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetBoardColumns: (): ThunkVoidAction =>\n    dispatch(actions.getBoardColumns()),\n  dispatchClearErrors: (): ThunkVoidAction => dispatch(actions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(BoardColumnSelect);\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, {\n  AutocompleteRenderGroupParams,\n} from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { RootState } from '../store/ducks';\nimport { actions, types } from '../store/ducks/api/company';\nimport { createErrorSelector } from '../store/ducks/error';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport { showToast } from '../utils/showToast';\nimport { ICompany } from '../store/models';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CompanyLogo from './CompanyLogo';\nimport { VariableSizeList, ListChildComponentProps } from 'react-window';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ListSubheader from '@material-ui/core/ListSubheader';\n\nconst LISTBOX_PADDING = 8; // px\n\nconst renderRow = (props: ListChildComponentProps) => {\n  const { data, index, style } = props;\n  return React.cloneElement(data[index], {\n    style: {\n      ...style,\n      top: (style.top as number) + LISTBOX_PADDING,\n    },\n  });\n};\n\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef<HTMLDivElement>((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return <div ref={ref} {...props} {...outerProps} />;\n});\n\nfunction useResetCache(data: any) {\n  const ref = React.useRef<VariableSizeList>(null);\n  React.useEffect(() => {\n    if (ref.current != null) {\n      ref.current.resetAfterIndex(0, true);\n    }\n  }, [data]);\n  return ref;\n}\n\n// Adapter for react-window\nconst ListboxComponent = React.forwardRef<HTMLDivElement>(\n  function ListboxComponent(props, ref) {\n    const { children, ...other } = props;\n    const itemData = React.Children.toArray(children);\n    const theme = useTheme();\n    const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\n    const itemCount = itemData.length;\n    const itemSize = smUp ? 36 : 48;\n\n    const getChildSize = (child: React.ReactNode) => {\n      if (React.isValidElement(child) && child.type === ListSubheader) {\n        return 48;\n      }\n\n      return itemSize;\n    };\n\n    const getHeight = () => {\n      if (itemCount > 8) {\n        return 8 * itemSize;\n      }\n      return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n    };\n\n    const gridRef = useResetCache(itemCount);\n\n    return (\n      <div ref={ref}>\n        <OuterElementContext.Provider value={other}>\n          <VariableSizeList\n            itemData={itemData}\n            height={getHeight() + 2 * LISTBOX_PADDING}\n            width=\"100%\"\n            ref={gridRef}\n            outerElementType={OuterElementType}\n            innerElementType=\"ul\"\n            itemSize={(index) => getChildSize(itemData[index])}\n            overscanCount={5}\n            itemCount={itemCount}\n          >\n            {renderRow}\n          </VariableSizeList>\n        </OuterElementContext.Provider>\n      </div>\n    );\n  }\n);\n\nconst renderGroup = (params: AutocompleteRenderGroupParams) => [\n  <ListSubheader key={params.key} component=\"div\">\n    {params.group}\n  </ListSubheader>,\n  params.children,\n];\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  handleSelect: (company: ICompany | null) => void;\n}\n\nconst CompanySelect: React.FC<Props> = ({\n  className,\n  handleSelect,\n  companies,\n  loading,\n  error,\n  dispatchGetCompanies,\n  dispatchClearErrors,\n}) => {\n  const [selectedCompany, setSelectedCompany] = React.useState<ICompany | null>(\n    null\n  );\n  React.useEffect(() => {\n    if (companies === null) {\n      dispatchGetCompanies();\n    }\n  }, [companies, dispatchGetCompanies]);\n\n  if (error) {\n    showToast('Error', error, 'danger', dispatchClearErrors);\n  }\n\n  return (\n    <Autocomplete\n      id=\"company-select\"\n      onChange={(_event: any, newCompany: ICompany | null) => {\n        setSelectedCompany(newCompany);\n        handleSelect(newCompany);\n      }}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.name}\n      options={companies || []}\n      loading={loading}\n      disableListWrap\n      ListboxComponent={\n        ListboxComponent as React.ComponentType<\n          React.HTMLAttributes<HTMLElement>\n        >\n      }\n      renderGroup={renderGroup}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Company\"\n          placeholder=\"Select a company...\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                {!!selectedCompany ? (\n                  <CompanyLogo company={selectedCompany} />\n                ) : (\n                  <BusinessIcon />\n                )}\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_COMPANIES]);\nconst errorSelector = createErrorSelector([types.GET_COMPANIES]);\n\nconst mapStateToProps = (state: RootState) => ({\n  companies: state.company.companies,\n  loading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetCompanies: (): ThunkVoidAction => dispatch(actions.getCompanies()),\n  dispatchClearErrors: (): ThunkVoidAction => dispatch(actions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(CompanySelect);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport BoardColumnSelect from '../../../../components/BoardColumnSelect';\nimport CompanySelect from '../../../../components/CompanySelect';\nimport { RootState } from '../../../../store/ducks';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { IBoardColumn, ICompany, IJobInput } from '../../../../store/models';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  handleInputChange,\n  useCustomState,\n} from '../../../../utils/customHooks';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    marginTop: {\n      marginTop: theme.spacing(3),\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  boardColumn: IBoardColumn;\n  onClose: () => void;\n}\n\nconst initialState: IJobInput = {\n  board: '',\n  company: '',\n  title: '',\n  boardColumn: '',\n};\nconst AddJobDialog: React.FC<Props> = ({\n  open,\n  boardColumn,\n  onClose,\n  selectedBoard,\n  dispatchCreateJob,\n}) => {\n  const classes = useStyles();\n  const [state, setState] = useCustomState(initialState);\n  React.useEffect(() => {\n    if (open && !!selectedBoard && !!boardColumn) {\n      setState({ board: selectedBoard.id, boardColumn: boardColumn.id });\n    }\n  }, [boardColumn, open, selectedBoard, setState]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    dispatchCreateJob(state as IJobInput);\n    setState(initialState);\n    onClose();\n  };\n\n  const handleSelectCompany = (company: ICompany | null) => {\n    setState({\n      company: (company && company.id) || '',\n    });\n  };\n\n  const handleSelectBoardColumn = (boardColumn: IBoardColumn | null) => {\n    setState({\n      boardColumn: (boardColumn && boardColumn.id) || '',\n    });\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"sm\"\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Add Job</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          name=\"title\"\n          label=\"Job Title\"\n          type=\"text\"\n          onChange={(e) => {\n            handleInputChange(e, setState);\n          }}\n          fullWidth\n        />\n        <CompanySelect\n          className={classes.marginTop}\n          handleSelect={handleSelectCompany}\n        />\n        <BoardColumnSelect\n          className={classes.marginTop}\n          handleSelect={handleSelectBoardColumn}\n          defaultValue={boardColumn}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"default\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} color=\"primary\">\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchCreateJob: (job: IJobInput): ThunkVoidAction =>\n    dispatch(actions.createJob(job)),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(AddJobDialog);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Droppable, DroppableProvided } from 'react-beautiful-dnd';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { IBoardColumn } from '../../../../store/models';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddJobDialog from './AddJobDialog';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    title: {\n      fontSize: 16,\n    },\n    subTitle: {\n      fontSize: 14,\n      marginBottom: 12,\n    },\n    marginTop: {\n      marginTop: theme.spacing(1),\n    },\n    column: {\n      height: '65vh',\n    },\n  })\n);\n\ninterface Props {\n  boardColumn: IBoardColumn;\n  jobCount: number;\n  children: any;\n}\n\nconst BoardColumn: React.FC<Props> = ({ boardColumn, jobCount, children }) => {\n  const [openAddJob, setOpenAddJob] = React.useState<boolean>(false);\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AddJobDialog\n        open={openAddJob}\n        onClose={() => {\n          setOpenAddJob(false);\n        }}\n        boardColumn={boardColumn}\n      />\n      <Card>\n        <CardContent>\n          <Typography className={classes.title} color=\"textPrimary\">\n            {boardColumn.title}\n          </Typography>\n          <Typography className={classes.subTitle} color=\"textSecondary\">\n            {jobCount} job{jobCount !== 1 && 's'}\n          </Typography>\n          <Button\n            onClick={() => setOpenAddJob(true)}\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<AddIcon />}\n            fullWidth\n          >\n            ADD JOB\n          </Button>\n          <Droppable droppableId={boardColumn.id}>\n            {(provided: DroppableProvided) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                className={classes.marginTop}\n              >\n                <PerfectScrollbar>\n                  <div className={classes.column}>\n                    {children}\n                    {provided.placeholder}\n                  </div>\n                </PerfectScrollbar>\n              </div>\n            )}\n          </Droppable>\n        </CardContent>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default BoardColumn;\n","import * as React from 'react';\nimport { IJob } from '../../../../store/models';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Grid from '@material-ui/core/Grid';\nimport CompanyLogo from '../../../../components/CompanyLogo';\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport EditText, { onSaveProps } from 'react-edit-text';\nimport TextField from '@material-ui/core/TextField';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { IJobUpdate } from '../../../../store/models/IJob';\nimport { Button } from '@material-ui/core';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && <React.Fragment>{children}</React.Fragment>}\n    </div>\n  );\n};\n\nconst a11yProps = (index: any) => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  };\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      marginBottom: theme.spacing(2),\n    },\n    modalContent: {\n      paddingBottom: theme.spacing(4),\n    },\n    label: {\n      paddingTop: '6px',\n      fontSize: '16px',\n      fontWeight: 600,\n    },\n    editabletext: {\n      fontSize: '16px',\n      fontWeight: 400,\n    },\n    textareaWrapper: {\n      paddingTop: '10px !important',\n    },\n    textarea: {\n      padding: theme.spacing(1),\n      fontWeight: 400,\n    },\n    noteTextarea: {\n      width: '100%',\n      fontFamily: 'Roboto',\n      padding: theme.spacing(1),\n      fontSize: '16px',\n      marginBottom: theme.spacing(1),\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  job: IJob | null;\n  onClose: () => void;\n}\n\nconst JobModal: React.FC<Props> = ({\n  open,\n  onClose,\n  job,\n  dispatchUpdateJob,\n}) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleSave = (data: onSaveProps) => {\n    const { name, value } = data;\n    if (job) {\n      dispatchUpdateJob(job.id, { [name]: value });\n    }\n  };\n\n  const handleSaveAddress = (data: onSaveProps) => {\n    const { value } = data;\n    if (job) {\n      dispatchUpdateJob(job.id, { location: { address: value } });\n    }\n  };\n\n  return (\n    job && (\n      <Dialog open={open} onClose={onClose} aria-labelledby=\"job-modal\">\n        <DialogTitle id=\"job-modal\" onClose={onClose}>\n          {job.company.name}\n        </DialogTitle>\n        <DialogContent className={classes.modalContent} dividers>\n          <Grid\n            className={classes.root}\n            container\n            spacing={3}\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <CompanyLogo company={job.company} size=\"xl\" />\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\" color=\"textPrimary\">\n                {job.company.name}\n              </Typography>\n              <Typography variant=\"h6\" color=\"textSecondary\">\n                {job.title}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Tabs\n            className={classes.root}\n            value={value}\n            onChange={handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label=\"Job Info\" {...a11yProps(0)} />\n            <Tab label=\"Notes\" {...a11yProps(1)} />\n            <Tab label=\"Company\" {...a11yProps(2)} />\n          </Tabs>\n          <TabPanel value={value} index={0}>\n            <Grid container spacing={1}>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Company:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    value={job.company.name}\n                    readonly\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Job Title:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"title\"\n                    value={job.title}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Address:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"address\"\n                    value={job.location && job.location.address}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSaveAddress}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>\n                    Date Applied:\n                  </Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    type=\"date\"\n                    className={classes.editabletext}\n                    name=\"dateApplied\"\n                    value={job.dateApplied}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Post URL:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"postUrl\"\n                    value={job.postUrl}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>\n                    Description:\n                  </Typography>\n                </Grid>\n                <Grid item sm={9} className={classes.textareaWrapper}>\n                  <TextField\n                    InputProps={{ className: classes.textarea }}\n                    id=\"outlined-multiline-static\"\n                    multiline\n                    fullWidth\n                    rows={4}\n                    value={job.description}\n                    placeholder=\"Enter a value\"\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <DialogContentText>\n              <Grid container spacing={1}>\n                <Grid container spacing={1}>\n                  <Grid item sm={12}>\n                    <textarea\n                      className={classes.noteTextarea}\n                      rows={4}\n                      placeholder=\"Enter a note...\"\n                    ></textarea>\n                  </Grid>\n                </Grid>\n                <Grid\n                  container\n                  spacing={1}\n                  direction=\"column\"\n                  alignItems=\"flex-end\"\n                >\n                  <Grid item sm={12}>\n                    <Button variant=\"contained\" color=\"primary\">\n                      Save\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </DialogContentText>\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <DialogContentText>\n              Interviews section under development\n            </DialogContentText>\n          </TabPanel>\n        </DialogContent>\n      </Dialog>\n    )\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchUpdateJob: (id: string, job: IJobUpdate): ThunkVoidAction =>\n    dispatch(actions.updateJob(id, job)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(JobModal);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Draggable, DraggableProvided } from 'react-beautiful-dnd';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport { IJob } from '../../../../store/models';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Moment from 'react-moment';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useConfirmDialog } from '../../../../utils/ConfirmDialogProvider';\nimport CompanyLogo from '../../../../components/CompanyLogo';\n\nconst useStyles = makeStyles({\n  root: {\n    cursor: 'grab',\n    marginBottom: '5px',\n  },\n  deleteIcon: {\n    opacity: 1,\n    transition: '0.3s',\n  },\n  hiddenDeleteIcon: {\n    opacity: 0,\n  },\n  title: {\n    fontSize: '16px',\n    fontWeight: 500,\n  },\n  subTitle: {\n    fontSize: '14px',\n  },\n  cardContent: {\n    padding: 0,\n  },\n  createdAt: {\n    float: 'right',\n    fontSize: '12px',\n    color: '#929292',\n    fontWeight: 200,\n  },\n});\n\ninterface Props extends PropsFromRedux {\n  job: IJob;\n  index: number;\n}\n\nconst Job: React.FC<Props> = ({ job, index, dispatchDeleteJob }) => {\n  const classes = useStyles();\n  const [hovering, setHovering] = React.useState(false);\n  const confirmDialog = useConfirmDialog();\n\n  const deleteJob = async (e: React.MouseEvent<{}, MouseEvent>, job: IJob) => {\n    e.stopPropagation();\n    const shouldDelete = await confirmDialog({\n      variant: 'danger',\n      title: 'Are you sure?',\n      description: 'Do you wish to delete the job?',\n    });\n    if (shouldDelete) {\n      dispatchDeleteJob(job);\n    }\n  };\n\n  return (\n    <Draggable draggableId={job.id} index={index}>\n      {(provided: DraggableProvided) => (\n        <Card\n          onMouseEnter={() => setHovering(true)}\n          onMouseLeave={() => setHovering(false)}\n          className={classes.root}\n          innerRef={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <CardContent>\n            <CardHeader\n              avatar={<CompanyLogo company={job.company} />}\n              action={\n                <IconButton\n                  className={\n                    hovering ? classes.deleteIcon : classes.hiddenDeleteIcon\n                  }\n                  aria-label=\"delete\"\n                  onClick={(e) => {\n                    deleteJob(e, job);\n                  }}\n                >\n                  <DeleteOutlineIcon />\n                </IconButton>\n              }\n              title={<span className={classes.title}>{job.company.name}</span>}\n              subheader={<span className={classes.subTitle}>{job.title}</span>}\n            />\n            <CardContent className={classes.cardContent}>\n              <span className={classes.createdAt}>\n                Added <Moment fromNow>{job.createdAt}</Moment>\n              </span>\n            </CardContent>\n          </CardContent>\n        </Card>\n      )}\n    </Draggable>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchDeleteJob: (job: IJob): ThunkVoidAction =>\n    dispatch(actions.deleteJob(job)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Job);\n","import * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../store/ducks';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  actions as boardColumnActions,\n  types as boardColumnTypes,\n} from '../../../../store/ducks/api/boardColumn';\nimport {\n  actions as jobActions,\n  types as jobTypes,\n} from '../../../../store/ducks/api/job';\nimport { createLoadingSelector } from '../../../../store/ducks/loading';\nimport { createErrorSelector } from '../../../../store/ducks/error';\nimport Loader from '../../../../components/Loader';\nimport { Redirect } from 'react-router-dom';\nimport BoardColumn from './BoardColumn';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport JobModal from './JobModal';\nimport Job from './Job';\nimport { IJob } from '../../../../store/models';\nimport { isEqual } from 'lodash';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(2),\n      marginBottom: 0,\n    },\n    wrapper: {\n      display: 'flex',\n      flexWrap: 'nowrap',\n      marginBottom: theme.spacing(3),\n    },\n    column: {\n      width: '370px',\n      flex: '0 0 auto',\n      marginRight: theme.spacing(2),\n    },\n  })\n);\nconst Board: React.FC<PropsFromRedux> = ({\n  selectedBoard,\n  jobs,\n  boardColumns,\n  loading,\n  error,\n  dispatchMoveJob,\n  dispatchMoveJobUI,\n  dispatchClearErrors,\n}) => {\n  const [jobModal, setJobModal] = React.useState<IJob | null>(null);\n  const classes = useStyles();\n\n  const handleDragEnd = (res: DropResult) => {\n    const { destination, source, draggableId } = res;\n    if (destination && !isEqual(source, destination)) {\n      const boardColumn = destination.droppableId;\n      const offset = destination.droppableId === source.droppableId ? 0 : -1;\n      const prevJobId =\n        destination.index > 0\n          ? jobs[boardColumn][destination.index + offset].id\n          : undefined;\n      dispatchMoveJobUI(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index\n      );\n      dispatchMoveJob(draggableId, boardColumn, prevJobId);\n    }\n  };\n\n  const memoJobModal = React.useMemo(\n    () => (\n      <JobModal\n        open={Boolean(jobModal)}\n        job={jobModal}\n        onClose={() => {\n          setJobModal(null);\n        }}\n      />\n    ),\n    [jobModal]\n  );\n\n  if (loading) {\n    return <Loader />;\n  } else if (selectedBoard === null) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <PerfectScrollbar>\n          <div className={classes.wrapper}>\n            <React.Fragment>{memoJobModal}</React.Fragment>\n            {boardColumns &&\n              boardColumns.length > 0 &&\n              boardColumns.map((boardColumn) => (\n                <div key={boardColumn.id} className={classes.column}>\n                  <BoardColumn\n                    boardColumn={boardColumn}\n                    jobCount={\n                      jobs && jobs[boardColumn.id]\n                        ? jobs[boardColumn.id].length\n                        : 0\n                    }\n                  >\n                    {jobs &&\n                      jobs[boardColumn.id] &&\n                      jobs[boardColumn.id].map((job: IJob, index: number) => (\n                        <div\n                          id={job.id}\n                          key={job.id}\n                          onClick={() => {\n                            setJobModal(job);\n                          }}\n                        >\n                          <Job job={job} index={index} />\n                        </div>\n                      ))}\n                  </BoardColumn>\n                </div>\n              ))}\n          </div>\n        </PerfectScrollbar>\n      </DragDropContext>\n    </div>\n  );\n};\n\nconst loadingSelector = createLoadingSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\nconst errorSelector = createErrorSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n  jobs: state.job.groupedJobs,\n  boardColumns: state.boardColumn.boardColumns,\n  loading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchMoveJob: (\n    id: string,\n    boardColumn: string,\n    prevJobId?: string\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJob(id, boardColumn, prevJobId)),\n  dispatchMoveJobUI: (\n    oldColumn: string,\n    newColumn: string,\n    oldIndex: number,\n    newIndex: number\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJobUI(oldColumn, newColumn, oldIndex, newIndex)),\n  dispatchClearErrors: (): ThunkVoidAction =>\n    dispatch(boardColumnActions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Board);\n"],"sourceRoot":""}