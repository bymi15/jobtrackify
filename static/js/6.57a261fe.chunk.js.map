{"version":3,"sources":["components/BoardColumnSelect.tsx","components/LetterAvatar.tsx","components/CompanyLogo.tsx","components/CompanySelect.tsx","views/pages/dashboard/board/AddJobDialog.tsx","views/pages/dashboard/board/BoardColumn.tsx","views/pages/dashboard/board/JobModal.tsx","views/pages/dashboard/board/Job.tsx","views/pages/dashboard/board/index.tsx"],"names":["loadingSelector","createLoadingSelector","types","GET_BOARD_COLUMNS","errorSelector","createErrorSelector","connector","connect","state","boardColumns","boardColumn","isLoading","error","dispatch","dispatchGetBoardColumns","actions","getBoardColumns","dispatchClearErrors","clearErrors","className","handleSelect","defaultValue","React","showToast","Autocomplete","id","onChange","_event","newBoardColumn","getOptionSelected","option","value","getOptionLabel","title","options","loading","renderInput","params","TextField","label","variant","InputProps","endAdornment","CircularProgress","color","size","fullWidth","useStyles","makeStyles","theme","createStyles","sm","width","spacing","height","lg","xl","LetterAvatar","name","classes","sizeClass","length","avatarText","charAt","names","split","hex","str","hash","i","charCodeAt","c","toString","toUpperCase","substring","stringToHexColor","Avatar","style","backgroundColor","CompanyLogo","company","logo","alt","src","aria-label","GET_COMPANIES","companies","dispatchGetCompanies","getCompanies","selectedCompany","setSelectedCompany","newCompany","placeholder","startAdornment","InputAdornment","position","marginTop","initialState","board","selectedBoard","dashboard","dispatchCreateJob","job","createJob","open","onClose","useCustomState","setState","Dialog","maxWidth","aria-labelledby","DialogTitle","DialogContent","autoFocus","margin","type","e","handleInputChange","DialogActions","Button","onClick","preventDefault","fontSize","subTitle","marginBottom","column","maxHeight","BoardColumn","jobCount","children","openAddJob","setOpenAddJob","Card","CardContent","Typography","startIcon","droppableId","provided","droppableProps","ref","innerRef","withStyles","root","padding","closeButton","right","top","palette","grey","props","other","disableTypography","IconButton","TabPanel","index","role","hidden","a11yProps","modalContent","paddingBottom","paddingTop","fontWeight","editabletext","textareaWrapper","textarea","dispatchUpdateJob","updateJob","setValue","handleSave","data","dividers","Grid","container","direction","justify","alignItems","item","Tabs","newValue","indicatorColor","textColor","Tab","readonly","onSave","location","dateApplied","postUrl","multiline","rows","description","DialogContentText","cursor","deleteIcon","opacity","transition","hiddenDeleteIcon","cardContent","createdAt","float","dispatchDeleteJob","deleteJob","hovering","setHovering","confirmDialog","useConfirmDialog","a","stopPropagation","draggableId","onMouseEnter","onMouseLeave","draggableProps","dragHandleProps","CardHeader","avatar","action","subheader","fromNow","boardColumnTypes","jobTypes","GET_JOBS_BOARD","jobs","groupedJobs","dispatchGetJobsByBoard","boardId","jobActions","getJobsByBoard","boardColumnActions","dispatchMoveJob","prevJobId","moveJob","dispatchMoveJobUI","oldColumn","newColumn","oldIndex","newIndex","moveJobUI","jobModal","setJobModal","memoJobModal","Boolean","Loader","to","onDragEnd","res","destination","source","isEqual","offset","undefined","Container","map","key","md"],"mappings":"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","file":"static/js/6.57a261fe.chunk.js","sourcesContent":["import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { RootState } from '../store/ducks';\nimport { actions, types } from '../store/ducks/api/boardColumn';\nimport { createErrorSelector } from '../store/ducks/error';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport { showToast } from '../utils/showToast';\nimport { IBoardColumn } from '../store/models';\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  handleSelect: (boardColumn: IBoardColumn | null) => void;\n  defaultValue?: IBoardColumn;\n}\n\nconst BoardColumnSelect: React.FC<Props> = ({\n  className,\n  handleSelect,\n  defaultValue,\n  boardColumns,\n  isLoading,\n  error,\n  dispatchGetBoardColumns,\n  dispatchClearErrors,\n}) => {\n  React.useEffect(() => {\n    if (boardColumns === null) {\n      dispatchGetBoardColumns();\n    }\n  }, [boardColumns, dispatchGetBoardColumns]);\n\n  if (error) {\n    showToast('Error', error, 'danger', dispatchClearErrors);\n  }\n\n  return (\n    <Autocomplete\n      id=\"boardcolumn-select\"\n      onChange={(_event: any, newBoardColumn: IBoardColumn | null) => {\n        handleSelect(newBoardColumn);\n      }}\n      defaultValue={defaultValue}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.title}\n      options={boardColumns || []}\n      loading={isLoading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Board Column\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {isLoading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_BOARD_COLUMNS]);\nconst errorSelector = createErrorSelector([types.GET_BOARD_COLUMNS]);\n\nconst mapStateToProps = (state: RootState) => ({\n  boardColumns: state.boardColumn.boardColumns,\n  isLoading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetBoardColumns: (): ThunkVoidAction =>\n    dispatch(actions.getBoardColumns()),\n  dispatchClearErrors: (): ThunkVoidAction => dispatch(actions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(BoardColumnSelect);\n","import Avatar from '@material-ui/core/Avatar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport * as React from 'react';\n\nconst stringToHexColor = (str: string | null): string => {\n  if (!str) {\n    return '#1976d2';\n  }\n\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  const c = (hash & 0x00ffffff).toString(16).toUpperCase();\n  return '#' + '00000'.substring(0, 6 - c.length) + c;\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    sm: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    lg: {\n      width: theme.spacing(7),\n      height: theme.spacing(7),\n    },\n    xl: {\n      width: theme.spacing(10),\n      height: theme.spacing(10),\n    },\n  })\n);\n\ninterface Props {\n  name: string;\n  color?: string;\n  size?: 'sm' | 'lg' | 'xl';\n}\n\nconst LetterAvatar: React.FC<Props> = ({ name, color, size }) => {\n  const classes = useStyles();\n  const sizeClass = size && classes[size];\n  if (name.length <= 0) return null;\n\n  let avatarText: string = name.charAt(0);\n  const names = name.split(' ');\n  if (names.length > 1) {\n    avatarText = names[0].charAt(0) + names[1].charAt(0);\n  }\n  const hex = color || stringToHexColor(name);\n  return (\n    <Avatar className={sizeClass} style={{ backgroundColor: hex }}>\n      {avatarText}\n    </Avatar>\n  );\n};\n\nexport default LetterAvatar;\n","import Avatar from '@material-ui/core/Avatar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { ICompany } from '../store/models';\nimport LetterAvatar from './LetterAvatar';\n\ninterface Props {\n  company: ICompany;\n  size?: 'sm' | 'lg' | 'xl';\n}\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    sm: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    lg: {\n      width: theme.spacing(7),\n      height: theme.spacing(7),\n    },\n    xl: {\n      width: theme.spacing(10),\n      height: theme.spacing(10),\n    },\n  })\n);\n\nconst CompanyLogo: React.FC<Props> = ({ company, size }) => {\n  const classes = useStyles();\n  const sizeClass = size && classes[size];\n\n  return company && company.logo ? (\n    <Avatar className={sizeClass} alt=\"companylogo\" src={company.logo} />\n  ) : (\n    <LetterAvatar size={size} name={company.name} aria-label=\"company-logo\" />\n  );\n};\n\nexport default CompanyLogo;\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { RootState } from '../store/ducks';\nimport { actions, types } from '../store/ducks/api/company';\nimport { createErrorSelector } from '../store/ducks/error';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport { showToast } from '../utils/showToast';\nimport { ICompany } from '../store/models';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CompanyLogo from './CompanyLogo';\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  handleSelect: (company: ICompany | null) => void;\n}\n\nconst CompanySelect: React.FC<Props> = ({\n  className,\n  handleSelect,\n  companies,\n  isLoading,\n  error,\n  dispatchGetCompanies,\n  dispatchClearErrors,\n}) => {\n  const [selectedCompany, setSelectedCompany] = React.useState<ICompany | null>(\n    null\n  );\n  React.useEffect(() => {\n    if (companies === null) {\n      dispatchGetCompanies();\n    }\n  }, [companies, dispatchGetCompanies]);\n\n  if (error) {\n    showToast('Error', error, 'danger', dispatchClearErrors);\n  }\n\n  return (\n    <Autocomplete\n      id=\"company-select\"\n      onChange={(_event: any, newCompany: ICompany | null) => {\n        setSelectedCompany(newCompany);\n        handleSelect(newCompany);\n      }}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.name}\n      options={companies || []}\n      loading={isLoading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Company\"\n          placeholder=\"Select a company...\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                {!!selectedCompany ? (\n                  <CompanyLogo company={selectedCompany} />\n                ) : (\n                  <BusinessIcon />\n                )}\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <React.Fragment>\n                {isLoading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_COMPANIES]);\nconst errorSelector = createErrorSelector([types.GET_COMPANIES]);\n\nconst mapStateToProps = (state: RootState) => ({\n  companies: state.company.companies,\n  isLoading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetCompanies: (): ThunkVoidAction => dispatch(actions.getCompanies()),\n  dispatchClearErrors: (): ThunkVoidAction => dispatch(actions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(CompanySelect);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport BoardColumnSelect from '../../../../components/BoardColumnSelect';\nimport CompanySelect from '../../../../components/CompanySelect';\nimport { RootState } from '../../../../store/ducks';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { IBoardColumn, ICompany, IJobInput } from '../../../../store/models';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  handleInputChange,\n  useCustomState,\n} from '../../../../utils/customHooks';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    marginTop: {\n      marginTop: theme.spacing(3),\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  boardColumn: IBoardColumn;\n  onClose: () => void;\n}\n\nconst initialState: IJobInput = {\n  board: '',\n  company: '',\n  title: '',\n  boardColumn: '',\n};\nconst AddJobDialog: React.FC<Props> = ({\n  open,\n  boardColumn,\n  onClose,\n  selectedBoard,\n  dispatchCreateJob,\n}) => {\n  const classes = useStyles();\n  const [state, setState] = useCustomState(initialState);\n  React.useEffect(() => {\n    if (open && !!selectedBoard && !!boardColumn) {\n      setState({ board: selectedBoard.id, boardColumn: boardColumn.id });\n    }\n  }, [boardColumn, open, selectedBoard, setState]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    dispatchCreateJob(state as IJobInput);\n    setState(initialState);\n    onClose();\n  };\n\n  const handleSelectCompany = (company: ICompany | null) => {\n    setState({\n      company: (company && company.id) || '',\n    });\n  };\n\n  const handleSelectBoardColumn = (boardColumn: IBoardColumn | null) => {\n    setState({\n      boardColumn: (boardColumn && boardColumn.id) || '',\n    });\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"sm\"\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Add Job</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          name=\"title\"\n          label=\"Job Title\"\n          type=\"text\"\n          onChange={(e) => {\n            handleInputChange(e, setState);\n          }}\n          fullWidth\n        />\n        <CompanySelect\n          className={classes.marginTop}\n          handleSelect={handleSelectCompany}\n        />\n        <BoardColumnSelect\n          className={classes.marginTop}\n          handleSelect={handleSelectBoardColumn}\n          defaultValue={boardColumn}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"default\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} color=\"primary\">\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchCreateJob: (job: IJobInput): ThunkVoidAction =>\n    dispatch(actions.createJob(job)),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(AddJobDialog);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Droppable, DroppableProvided } from 'react-beautiful-dnd';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { IBoardColumn } from '../../../../store/models';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddJobDialog from './AddJobDialog';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    title: {\n      fontSize: 16,\n    },\n    subTitle: {\n      fontSize: 14,\n      marginBottom: 12,\n    },\n    marginTop: {\n      marginTop: theme.spacing(1),\n    },\n    column: {\n      maxHeight: '70vh',\n    },\n  })\n);\n\ninterface Props {\n  boardColumn: IBoardColumn;\n  jobCount: number;\n  children: any;\n}\n\nconst BoardColumn: React.FC<Props> = ({ boardColumn, jobCount, children }) => {\n  const [openAddJob, setOpenAddJob] = React.useState<boolean>(false);\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AddJobDialog\n        open={openAddJob}\n        onClose={() => {\n          setOpenAddJob(false);\n        }}\n        boardColumn={boardColumn}\n      />\n      <Card>\n        <CardContent>\n          <Typography className={classes.title} color=\"textPrimary\">\n            {boardColumn.title}\n          </Typography>\n          <Typography className={classes.subTitle} color=\"textSecondary\">\n            {jobCount} job{jobCount !== 1 && 's'}\n          </Typography>\n          <Button\n            onClick={() => setOpenAddJob(true)}\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<AddIcon />}\n            fullWidth\n          >\n            ADD JOB\n          </Button>\n          <Droppable droppableId={boardColumn.id}>\n            {(provided: DroppableProvided) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                className={classes.marginTop}\n              >\n                <PerfectScrollbar>\n                  <div className={classes.column}>\n                    {children}\n                    {provided.placeholder}\n                  </div>\n                </PerfectScrollbar>\n              </div>\n            )}\n          </Droppable>\n        </CardContent>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default BoardColumn;\n","import * as React from 'react';\nimport { IJob } from '../../../../store/models';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Grid from '@material-ui/core/Grid';\nimport CompanyLogo from '../../../../components/CompanyLogo';\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport EditText, { onSaveProps } from 'react-edit-text';\nimport TextField from '@material-ui/core/TextField';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { IJobUpdate } from '../../../../store/models/IJob';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && <React.Fragment>{children}</React.Fragment>}\n    </div>\n  );\n};\n\nconst a11yProps = (index: any) => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  };\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      marginBottom: theme.spacing(2),\n    },\n    modalContent: {\n      paddingBottom: theme.spacing(4),\n    },\n    label: {\n      paddingTop: '6px',\n      fontSize: '16px',\n      fontWeight: 600,\n    },\n    editabletext: {\n      fontSize: '16px',\n      fontWeight: 400,\n    },\n    textareaWrapper: {\n      paddingTop: '10px !important',\n    },\n    textarea: {\n      padding: theme.spacing(1),\n      fontWeight: 400,\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  job: IJob | null;\n  onClose: () => void;\n}\n\nconst JobModal: React.FC<Props> = ({\n  open,\n  onClose,\n  job,\n  dispatchUpdateJob,\n}) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleSave = (data: onSaveProps) => {\n    const { name, value } = data;\n    if (job) {\n      dispatchUpdateJob(job.id, { [name]: value });\n    }\n  };\n\n  return (\n    job && (\n      <Dialog open={open} onClose={onClose} aria-labelledby=\"job-modal\">\n        <DialogTitle id=\"job-modal\" onClose={onClose}>\n          {job.company.name}\n        </DialogTitle>\n        <DialogContent className={classes.modalContent} dividers>\n          <Grid\n            className={classes.root}\n            container\n            spacing={3}\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <CompanyLogo company={job.company} size=\"xl\" />\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\" color=\"textPrimary\">\n                {job.company.name}\n              </Typography>\n              <Typography variant=\"h6\" color=\"textSecondary\">\n                {job.title}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Tabs\n            className={classes.root}\n            value={value}\n            onChange={handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label=\"Info\" {...a11yProps(0)} />\n            <Tab label=\"Notes\" {...a11yProps(1)} />\n            <Tab label=\"Interviews\" {...a11yProps(2)} />\n          </Tabs>\n          <TabPanel value={value} index={0}>\n            <Grid container spacing={1}>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Company:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    value={job.company.name}\n                    readonly\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Job Title:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"title\"\n                    value={job.title}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Location:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"location\"\n                    value={job.location}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>\n                    Date Applied:\n                  </Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"dateApplied\"\n                    value={job.dateApplied}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Post URL:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"postUrl\"\n                    value={job.postUrl}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>\n                    Description:\n                  </Typography>\n                </Grid>\n                <Grid item sm={9} className={classes.textareaWrapper}>\n                  <TextField\n                    InputProps={{ className: classes.textarea }}\n                    id=\"outlined-multiline-static\"\n                    multiline\n                    fullWidth\n                    rows={4}\n                    value={job.description}\n                    placeholder=\"Enter a value\"\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <DialogContentText>\n              Notes section under development\n            </DialogContentText>\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <DialogContentText>\n              Interviews section under development\n            </DialogContentText>\n          </TabPanel>\n        </DialogContent>\n      </Dialog>\n    )\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchUpdateJob: (id: string, job: IJobUpdate): ThunkVoidAction =>\n    dispatch(actions.updateJob(id, job)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(JobModal);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Draggable, DraggableProvided } from 'react-beautiful-dnd';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport { IJob } from '../../../../store/models';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Moment from 'react-moment';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useConfirmDialog } from '../../../../utils/ConfirmDialogProvider';\nimport CompanyLogo from '../../../../components/CompanyLogo';\n\nconst useStyles = makeStyles({\n  root: {\n    cursor: 'grab',\n  },\n  deleteIcon: {\n    opacity: 1,\n    transition: '0.3s',\n  },\n  hiddenDeleteIcon: {\n    opacity: 0,\n  },\n  title: {\n    fontSize: '16px',\n    fontWeight: 500,\n  },\n  subTitle: {\n    fontSize: '14px',\n  },\n  cardContent: {\n    padding: 0,\n  },\n  createdAt: {\n    float: 'right',\n    fontSize: '12px',\n    color: '#929292',\n    fontWeight: 200,\n  },\n});\n\ninterface Props extends PropsFromRedux {\n  job: IJob;\n  index: number;\n}\n\nconst Job: React.FC<Props> = ({ job, index, dispatchDeleteJob }) => {\n  const classes = useStyles();\n  const [hovering, setHovering] = React.useState(false);\n  const confirmDialog = useConfirmDialog();\n\n  const deleteJob = async (e: React.MouseEvent<{}, MouseEvent>, job: IJob) => {\n    e.stopPropagation();\n    const shouldDelete = await confirmDialog({\n      variant: 'danger',\n      title: 'Are you sure?',\n      description: 'Do you wish to delete the job?',\n    });\n    if (shouldDelete) {\n      dispatchDeleteJob(job.id);\n    }\n  };\n\n  return (\n    <Draggable draggableId={job.id} index={index}>\n      {(provided: DraggableProvided) => (\n        <Card\n          onMouseEnter={() => setHovering(true)}\n          onMouseLeave={() => setHovering(false)}\n          className={classes.root}\n          innerRef={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <CardContent>\n            <CardHeader\n              avatar={<CompanyLogo company={job.company} />}\n              action={\n                <IconButton\n                  className={\n                    hovering ? classes.deleteIcon : classes.hiddenDeleteIcon\n                  }\n                  aria-label=\"delete\"\n                  onClick={(e) => {\n                    deleteJob(e, job);\n                  }}\n                >\n                  <DeleteOutlineIcon />\n                </IconButton>\n              }\n              title={<span className={classes.title}>{job.company.name}</span>}\n              subheader={<span className={classes.subTitle}>{job.title}</span>}\n            />\n            <CardContent className={classes.cardContent}>\n              <span className={classes.createdAt}>\n                Added <Moment fromNow>{job.createdAt}</Moment>\n              </span>\n            </CardContent>\n          </CardContent>\n        </Card>\n      )}\n    </Draggable>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchDeleteJob: (id: string): ThunkVoidAction =>\n    dispatch(actions.deleteJob(id)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Job);\n","import * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../store/ducks';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  actions as boardColumnActions,\n  types as boardColumnTypes,\n} from '../../../../store/ducks/api/boardColumn';\nimport {\n  actions as jobActions,\n  types as jobTypes,\n} from '../../../../store/ducks/api/job';\nimport { createLoadingSelector } from '../../../../store/ducks/loading';\nimport { createErrorSelector } from '../../../../store/ducks/error';\nimport Loader from '../../../../components/Loader';\nimport { Redirect } from 'react-router-dom';\nimport BoardColumn from './BoardColumn';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport JobModal from './JobModal';\nimport Job from './Job';\nimport { IJob } from '../../../../store/models';\nimport { isEqual } from 'lodash';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(3),\n    },\n  })\n);\nconst Board: React.FC<PropsFromRedux> = ({\n  selectedBoard,\n  jobs,\n  boardColumns,\n  isLoading,\n  error,\n  dispatchGetBoardColumns,\n  dispatchGetJobsByBoard,\n  dispatchMoveJob,\n  dispatchMoveJobUI,\n  dispatchClearErrors,\n}) => {\n  const [jobModal, setJobModal] = React.useState<IJob | null>(null);\n  const classes = useStyles();\n  React.useEffect(() => {\n    //TODO: cache jobs by board\n    if (selectedBoard) {\n      dispatchGetBoardColumns();\n      dispatchGetJobsByBoard(selectedBoard.id);\n    }\n  }, [dispatchGetBoardColumns, dispatchGetJobsByBoard, selectedBoard]);\n\n  const handleDragEnd = (res: DropResult) => {\n    const { destination, source, draggableId } = res;\n    if (destination && !isEqual(source, destination)) {\n      const boardColumn = destination.droppableId;\n      const offset = destination.droppableId === source.droppableId ? 0 : -1;\n      const prevJobId =\n        destination.index > 0\n          ? jobs[boardColumn][destination.index + offset].id\n          : undefined;\n      dispatchMoveJobUI(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index\n      );\n      dispatchMoveJob(draggableId, boardColumn, prevJobId);\n    }\n  };\n\n  const memoJobModal = React.useMemo(\n    () => (\n      <JobModal\n        open={Boolean(jobModal)}\n        job={jobModal}\n        onClose={() => {\n          setJobModal(null);\n        }}\n      />\n    ),\n    [jobModal]\n  );\n\n  if (isLoading) {\n    return <Loader />;\n  } else if (selectedBoard === null) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <React.Fragment>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <Container className={classes.root} maxWidth=\"xl\">\n          <React.Fragment>{memoJobModal}</React.Fragment>\n          <Grid container spacing={2}>\n            {boardColumns &&\n              boardColumns.length > 0 &&\n              boardColumns.map((boardColumn) => (\n                <Grid key={boardColumn.id} item sm={6} md={3}>\n                  <BoardColumn\n                    boardColumn={boardColumn}\n                    jobCount={\n                      jobs && jobs[boardColumn.id]\n                        ? jobs[boardColumn.id].length\n                        : 0\n                    }\n                  >\n                    {jobs &&\n                      jobs[boardColumn.id] &&\n                      jobs[boardColumn.id].map((job: IJob, index: number) => (\n                        <div\n                          id={job.id}\n                          key={job.id}\n                          onClick={() => {\n                            setJobModal(job);\n                          }}\n                        >\n                          <Job job={job} index={index} />\n                        </div>\n                      ))}\n                  </BoardColumn>\n                </Grid>\n              ))}\n          </Grid>\n        </Container>\n      </DragDropContext>\n    </React.Fragment>\n  );\n};\n\nconst loadingSelector = createLoadingSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\nconst errorSelector = createErrorSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n  jobs: state.job.groupedJobs,\n  boardColumns: state.boardColumn.boardColumns,\n  isLoading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetJobsByBoard: (boardId: string): ThunkVoidAction =>\n    dispatch(jobActions.getJobsByBoard(boardId)),\n  dispatchGetBoardColumns: (): ThunkVoidAction =>\n    dispatch(boardColumnActions.getBoardColumns()),\n  dispatchMoveJob: (\n    id: string,\n    boardColumn: string,\n    prevJobId?: string\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJob(id, boardColumn, prevJobId)),\n  dispatchMoveJobUI: (\n    oldColumn: string,\n    newColumn: string,\n    oldIndex: number,\n    newIndex: number\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJobUI(oldColumn, newColumn, oldIndex, newIndex)),\n  dispatchClearErrors: (): ThunkVoidAction =>\n    dispatch(boardColumnActions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Board);\n"],"sourceRoot":""}