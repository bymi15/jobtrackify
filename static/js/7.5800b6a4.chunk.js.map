{"version":3,"sources":["components/CompanyLogo.tsx","components/BoardColumnSelect.tsx","utils/filterCompanies.ts","components/CompanySelect.tsx","views/pages/dashboard/board/AddJobDialog.tsx","views/pages/dashboard/board/BoardColumn.tsx","views/pages/dashboard/board/JobModal.tsx","views/pages/dashboard/board/Job.tsx","views/pages/dashboard/board/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","sm","width","spacing","height","md","lg","xl","CompanyLogo","company","size","classes","sizeClass","name","aria-label","logo","className","alt","src","loadingSelector","createLoadingSelector","types","GET_BOARD_COLUMNS","errorSelector","createErrorSelector","connector","connect","state","boardColumns","boardColumn","loading","error","dispatch","dispatchGetBoardColumns","actions","getBoardColumns","dispatchClearErrors","clearErrors","handleSelect","defaultValue","React","showToast","Autocomplete","id","onChange","_event","newBoardColumn","getOptionSelected","option","value","getOptionLabel","title","options","renderInput","params","TextField","label","variant","InputProps","endAdornment","CircularProgress","color","fullWidth","stripDiacritics","str","normalize","replace","companies","selectedCompany","setSelectedCompany","filteredCompanies","setFilteredCompanies","applyFilter","query","res","limit","matchFrom","toLowerCase","trim","filter","candidate","indexOf","slice","filterCompanies","freeSolo","newCompany","onInputChange","disableClearable","placeholder","type","startAdornment","InputAdornment","position","marginTop","initialState","board","selectedBoard","dashboard","dispatchCreateJob","job","createJob","open","onClose","useCustomState","setState","Dialog","maxWidth","aria-labelledby","DialogTitle","DialogContent","autoFocus","margin","e","handleInputChange","val","undefined","companyCustom","DialogActions","Button","onClick","preventDefault","fontSize","subTitle","marginBottom","column","BoardColumn","jobCount","children","openAddJob","setOpenAddJob","Card","CardContent","Typography","startIcon","droppableId","provided","droppableProps","ref","innerRef","withStyles","root","padding","closeButton","right","top","palette","grey","props","other","disableTypography","IconButton","TabPanel","index","role","hidden","a11yProps","modalContent","paddingBottom","paddingTop","fontWeight","editabletext","textareaWrapper","textarea","noteTextarea","fontFamily","dispatchUpdateJob","updateJob","setValue","handleSave","data","companyName","dividers","Grid","container","direction","justify","alignItems","item","Tabs","newValue","indicatorColor","textColor","Tab","readonly","onSave","location","address","dateApplied","postUrl","multiline","rows","description","DialogContentText","cursor","deleteIcon","opacity","transition","hiddenDeleteIcon","cardContent","createdAt","float","dispatchDeleteJob","deleteJob","hovering","setHovering","confirmDialog","useConfirmDialog","a","stopPropagation","draggableId","onMouseEnter","onMouseLeave","draggableProps","dragHandleProps","CardHeader","avatar","action","subheader","fromNow","wrapper","display","flexWrap","flex","marginRight","boardColumnTypes","jobTypes","GET_JOBS_BOARD","jobs","groupedJobs","dispatchMoveJob","prevJobId","jobActions","moveJob","dispatchMoveJobUI","oldColumn","newColumn","oldIndex","newIndex","moveJobUI","boardColumnActions","jobModal","setJobModal","memoJobModal","Boolean","Loader","to","onDragEnd","destination","source","isEqual","offset","length","map","key"],"mappings":"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","file":"static/js/7.5800b6a4.chunk.js","sourcesContent":["import Avatar from '@material-ui/core/Avatar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { ICompany } from '../store/models';\nimport LetterAvatar from './LetterAvatar';\n\ninterface Props {\n  company: ICompany | string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n}\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    sm: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    md: {\n      width: theme.spacing(5),\n      height: theme.spacing(5),\n    },\n    lg: {\n      width: theme.spacing(7),\n      height: theme.spacing(7),\n    },\n    xl: {\n      width: theme.spacing(10),\n      height: theme.spacing(10),\n    },\n  })\n);\n\nconst CompanyLogo: React.FC<Props> = ({ company, size }) => {\n  const classes = useStyles();\n  const sizeClass = size && classes[size];\n\n  if (typeof company === 'string') {\n    return (\n      <LetterAvatar size={size} name={company} aria-label=\"company-logo\" />\n    );\n  } else {\n    return company && company.logo ? (\n      <Avatar className={sizeClass} alt=\"companylogo\" src={company.logo} />\n    ) : (\n      <LetterAvatar size={size} name={company.name} aria-label=\"company-logo\" />\n    );\n  }\n};\n\nexport default CompanyLogo;\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { RootState } from '../store/ducks';\nimport { actions, types } from '../store/ducks/api/boardColumn';\nimport { createErrorSelector } from '../store/ducks/error';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport { showToast } from '../utils/showToast';\nimport { IBoardColumn } from '../store/models';\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  handleSelect: (boardColumn: IBoardColumn | null) => void;\n  defaultValue?: IBoardColumn;\n}\n\nconst BoardColumnSelect: React.FC<Props> = ({\n  className,\n  handleSelect,\n  defaultValue,\n  boardColumns,\n  loading,\n  error,\n  dispatchGetBoardColumns,\n  dispatchClearErrors,\n}) => {\n  React.useEffect(() => {\n    if (boardColumns === null) {\n      dispatchGetBoardColumns();\n    }\n  }, [boardColumns, dispatchGetBoardColumns]);\n\n  if (error) {\n    showToast('Error', error, 'danger', dispatchClearErrors);\n  }\n\n  return (\n    <Autocomplete\n      id=\"boardcolumn-select\"\n      onChange={(_event: any, newBoardColumn: IBoardColumn | null) => {\n        handleSelect(newBoardColumn);\n      }}\n      defaultValue={defaultValue}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.title}\n      options={boardColumns || []}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Board Column\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_BOARD_COLUMNS]);\nconst errorSelector = createErrorSelector([types.GET_BOARD_COLUMNS]);\n\nconst mapStateToProps = (state: RootState) => ({\n  boardColumns: state.boardColumn.boardColumns,\n  loading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetBoardColumns: (): ThunkVoidAction =>\n    dispatch(actions.getBoardColumns()),\n  dispatchClearErrors: (): ThunkVoidAction => dispatch(actions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(BoardColumnSelect);\n","import { ICompany } from '../store/models';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\nfunction stripDiacritics(str: string) {\n  return typeof str.normalize !== 'undefined'\n    ? str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n    : str;\n}\n\nexport default function filterCompanies(\n  query: string,\n  companies: ICompany[],\n  limit: number = 5,\n  matchFrom: string = 'any'\n) {\n  query = stripDiacritics(query).toLowerCase().trim();\n  if (query === '') return [];\n  const filteredCompanies = companies.filter((company) => {\n    const candidate = stripDiacritics(company.name).toLowerCase().trim();\n    return matchFrom === 'start'\n      ? candidate.indexOf(query) === 0\n      : candidate.indexOf(query) > -1;\n  });\n  return filteredCompanies.slice(0, limit);\n}\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../store/ducks';\nimport { ICompany } from '../store/models';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CompanyLogo from './CompanyLogo';\nimport filterCompanies from '../utils/filterCompanies';\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  onChange: (company: ICompany | string | null) => void;\n}\n\nconst CompanySelect: React.FC<Props> = ({ className, onChange, companies }) => {\n  const [selectedCompany, setSelectedCompany] = React.useState<\n    ICompany | string | null\n  >(null);\n  const [filteredCompanies, setFilteredCompanies] = React.useState<ICompany[]>(\n    []\n  );\n\n  const applyFilter = (query: string) => {\n    const res = filterCompanies(query, companies || [], 5, 'start');\n    setFilteredCompanies(res);\n  };\n\n  return (\n    <Autocomplete\n      id=\"company-select\"\n      freeSolo\n      onChange={(_event: any, newCompany: ICompany | string) => {\n        if (typeof newCompany !== 'string') {\n          setSelectedCompany(newCompany);\n          onChange(newCompany);\n        }\n      }}\n      onInputChange={(_event: any, value: string) => {\n        applyFilter(value);\n        setSelectedCompany(value);\n        onChange(value);\n      }}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.name}\n      options={filteredCompanies}\n      disableClearable\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Company\"\n          placeholder=\"Enter a company name...\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            type: 'search',\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                {!!selectedCompany && typeof selectedCompany !== 'string' ? (\n                  <CompanyLogo company={selectedCompany} />\n                ) : (\n                  <BusinessIcon />\n                )}\n              </InputAdornment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  companies: state.company.companies,\n});\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(CompanySelect);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport BoardColumnSelect from '../../../../components/BoardColumnSelect';\nimport CompanySelect from '../../../../components/CompanySelect';\nimport { RootState } from '../../../../store/ducks';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { IBoardColumn, ICompany, IJobInput } from '../../../../store/models';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  handleInputChange,\n  useCustomState,\n} from '../../../../utils/customHooks';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    marginTop: {\n      marginTop: theme.spacing(3),\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  boardColumn: IBoardColumn;\n  onClose: () => void;\n}\n\nconst initialState: IJobInput = {\n  board: '',\n  title: '',\n  boardColumn: '',\n};\nconst AddJobDialog: React.FC<Props> = ({\n  open,\n  boardColumn,\n  onClose,\n  selectedBoard,\n  dispatchCreateJob,\n}) => {\n  const classes = useStyles();\n  const [state, setState] = useCustomState(initialState);\n  React.useEffect(() => {\n    if (open && !!selectedBoard && !!boardColumn) {\n      setState({ board: selectedBoard.id, boardColumn: boardColumn.id });\n    }\n  }, [boardColumn, open, selectedBoard, setState]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    dispatchCreateJob(state as IJobInput);\n    setState(initialState);\n    onClose();\n  };\n\n  const handleSelectCompany = (val: ICompany | string | null) => {\n    if (typeof val === 'string') {\n      setState({\n        company: undefined,\n        companyCustom: val,\n      });\n    } else {\n      setState({\n        company: (val && val.id) || '',\n        companyCustom: undefined,\n      });\n    }\n  };\n\n  const handleSelectBoardColumn = (boardColumn: IBoardColumn | null) => {\n    setState({\n      boardColumn: (boardColumn && boardColumn.id) || '',\n    });\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"sm\"\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Add Job</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          name=\"title\"\n          label=\"Job Title\"\n          type=\"text\"\n          onChange={(e) => {\n            handleInputChange(e, setState);\n          }}\n          fullWidth\n        />\n        <CompanySelect\n          className={classes.marginTop}\n          onChange={handleSelectCompany}\n        />\n        <BoardColumnSelect\n          className={classes.marginTop}\n          handleSelect={handleSelectBoardColumn}\n          defaultValue={boardColumn}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"default\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} color=\"primary\">\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchCreateJob: (job: IJobInput): ThunkVoidAction =>\n    dispatch(actions.createJob(job)),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(AddJobDialog);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Droppable, DroppableProvided } from 'react-beautiful-dnd';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { IBoardColumn } from '../../../../store/models';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddJobDialog from './AddJobDialog';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    title: {\n      fontSize: 16,\n    },\n    subTitle: {\n      fontSize: 14,\n      marginBottom: 12,\n    },\n    marginTop: {\n      marginTop: theme.spacing(1),\n    },\n    column: {\n      height: '65vh',\n    },\n  })\n);\n\ninterface Props {\n  boardColumn: IBoardColumn;\n  jobCount: number;\n  children: any;\n}\n\nconst BoardColumn: React.FC<Props> = ({ boardColumn, jobCount, children }) => {\n  const [openAddJob, setOpenAddJob] = React.useState<boolean>(false);\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AddJobDialog\n        open={openAddJob}\n        onClose={() => {\n          setOpenAddJob(false);\n        }}\n        boardColumn={boardColumn}\n      />\n      <Card>\n        <CardContent>\n          <Typography className={classes.title} color=\"textPrimary\">\n            {boardColumn.title}\n          </Typography>\n          <Typography className={classes.subTitle} color=\"textSecondary\">\n            {jobCount} job{jobCount !== 1 && 's'}\n          </Typography>\n          <Button\n            onClick={() => setOpenAddJob(true)}\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<AddIcon />}\n            fullWidth\n          >\n            ADD JOB\n          </Button>\n          <Droppable droppableId={boardColumn.id}>\n            {(provided: DroppableProvided) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                className={classes.marginTop}\n              >\n                <PerfectScrollbar>\n                  <div className={classes.column}>\n                    {children}\n                    {provided.placeholder}\n                  </div>\n                </PerfectScrollbar>\n              </div>\n            )}\n          </Droppable>\n        </CardContent>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default BoardColumn;\n","import * as React from 'react';\nimport { IJob } from '../../../../store/models';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Grid from '@material-ui/core/Grid';\nimport CompanyLogo from '../../../../components/CompanyLogo';\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport EditText, { onSaveProps } from 'react-edit-text';\nimport TextField from '@material-ui/core/TextField';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { IJobUpdate } from '../../../../store/models/IJob';\nimport { Button } from '@material-ui/core';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && <React.Fragment>{children}</React.Fragment>}\n    </div>\n  );\n};\n\nconst a11yProps = (index: any) => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  };\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      marginBottom: theme.spacing(2),\n    },\n    modalContent: {\n      paddingBottom: theme.spacing(4),\n    },\n    label: {\n      paddingTop: '6px',\n      fontSize: '16px',\n      fontWeight: 600,\n    },\n    editabletext: {\n      fontSize: '16px',\n      fontWeight: 400,\n    },\n    textareaWrapper: {\n      paddingTop: '10px !important',\n    },\n    textarea: {\n      padding: theme.spacing(1),\n      fontWeight: 400,\n    },\n    noteTextarea: {\n      width: '100%',\n      fontFamily: 'Roboto',\n      padding: theme.spacing(1),\n      fontSize: '16px',\n      marginBottom: theme.spacing(1),\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  job: IJob | null;\n  onClose: () => void;\n}\n\nconst JobModal: React.FC<Props> = ({\n  open,\n  onClose,\n  job,\n  dispatchUpdateJob,\n}) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleSave = (data: onSaveProps) => {\n    const { name, value } = data;\n    if (job) {\n      dispatchUpdateJob(job.id, { [name]: value });\n    }\n  };\n\n  const handleSaveAddress = (data: onSaveProps) => {\n    const { value } = data;\n    if (job) {\n      dispatchUpdateJob(job.id, { location: { address: value } });\n    }\n  };\n\n  const companyName = job\n    ? typeof job.company === 'string'\n      ? job.company\n      : job.company.name\n    : '';\n\n  return (\n    job && (\n      <Dialog open={open} onClose={onClose} aria-labelledby=\"job-modal\">\n        <DialogTitle id=\"job-modal\" onClose={onClose}>\n          {companyName}\n        </DialogTitle>\n        <DialogContent className={classes.modalContent} dividers>\n          <Grid\n            className={classes.root}\n            container\n            spacing={3}\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <CompanyLogo company={job.company} size=\"xl\" />\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\" color=\"textPrimary\">\n                {companyName}\n              </Typography>\n              <Typography variant=\"h6\" color=\"textSecondary\">\n                {job.title}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Tabs\n            className={classes.root}\n            value={value}\n            onChange={handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label=\"Job Info\" {...a11yProps(0)} />\n            <Tab label=\"Notes\" {...a11yProps(1)} />\n            <Tab label=\"Company\" {...a11yProps(2)} />\n          </Tabs>\n          <TabPanel value={value} index={0}>\n            <Grid container spacing={1}>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Company:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    value={companyName}\n                    readonly\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Job Title:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"title\"\n                    value={job.title}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Address:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"address\"\n                    value={job.location && job.location.address}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSaveAddress}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>\n                    Date Applied:\n                  </Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    type=\"date\"\n                    className={classes.editabletext}\n                    name=\"dateApplied\"\n                    value={job.dateApplied}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Post URL:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"postUrl\"\n                    value={job.postUrl}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>\n                    Description:\n                  </Typography>\n                </Grid>\n                <Grid item sm={9} className={classes.textareaWrapper}>\n                  <TextField\n                    InputProps={{ className: classes.textarea }}\n                    id=\"outlined-multiline-static\"\n                    multiline\n                    fullWidth\n                    rows={4}\n                    value={job.description}\n                    placeholder=\"Enter a value\"\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <DialogContentText>\n              <Grid container spacing={1}>\n                <Grid container spacing={1}>\n                  <Grid item sm={12}>\n                    <textarea\n                      className={classes.noteTextarea}\n                      rows={4}\n                      placeholder=\"Enter a note...\"\n                    ></textarea>\n                  </Grid>\n                </Grid>\n                <Grid\n                  container\n                  spacing={1}\n                  direction=\"column\"\n                  alignItems=\"flex-end\"\n                >\n                  <Grid item sm={12}>\n                    <Button variant=\"contained\" color=\"primary\">\n                      Save\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </DialogContentText>\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <DialogContentText>\n              Interviews section under development\n            </DialogContentText>\n          </TabPanel>\n        </DialogContent>\n      </Dialog>\n    )\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchUpdateJob: (id: string, job: IJobUpdate): ThunkVoidAction =>\n    dispatch(actions.updateJob(id, job)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(JobModal);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Draggable, DraggableProvided } from 'react-beautiful-dnd';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport { IJob } from '../../../../store/models';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Moment from 'react-moment';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useConfirmDialog } from '../../../../utils/ConfirmDialogProvider';\nimport CompanyLogo from '../../../../components/CompanyLogo';\n\nconst useStyles = makeStyles({\n  root: {\n    cursor: 'grab',\n    marginBottom: '5px',\n  },\n  deleteIcon: {\n    opacity: 1,\n    transition: '0.3s',\n  },\n  hiddenDeleteIcon: {\n    opacity: 0,\n  },\n  title: {\n    fontSize: '16px',\n    fontWeight: 500,\n  },\n  subTitle: {\n    fontSize: '14px',\n  },\n  cardContent: {\n    padding: 0,\n  },\n  createdAt: {\n    float: 'right',\n    fontSize: '12px',\n    color: '#929292',\n    fontWeight: 200,\n  },\n});\n\ninterface Props extends PropsFromRedux {\n  job: IJob;\n  index: number;\n}\n\nconst Job: React.FC<Props> = ({ job, index, dispatchDeleteJob }) => {\n  const classes = useStyles();\n  const [hovering, setHovering] = React.useState(false);\n  const confirmDialog = useConfirmDialog();\n\n  const deleteJob = async (e: React.MouseEvent<{}, MouseEvent>, job: IJob) => {\n    e.stopPropagation();\n    const shouldDelete = await confirmDialog({\n      variant: 'danger',\n      title: 'Are you sure?',\n      description: 'Do you wish to delete the job?',\n    });\n    if (shouldDelete) {\n      dispatchDeleteJob(job);\n    }\n  };\n\n  return (\n    <Draggable draggableId={job.id} index={index}>\n      {(provided: DraggableProvided) => (\n        <Card\n          onMouseEnter={() => setHovering(true)}\n          onMouseLeave={() => setHovering(false)}\n          className={classes.root}\n          innerRef={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <CardContent>\n            <CardHeader\n              avatar={<CompanyLogo company={job.company} />}\n              action={\n                <IconButton\n                  className={\n                    hovering ? classes.deleteIcon : classes.hiddenDeleteIcon\n                  }\n                  aria-label=\"delete\"\n                  onClick={(e) => {\n                    deleteJob(e, job);\n                  }}\n                >\n                  <DeleteOutlineIcon />\n                </IconButton>\n              }\n              title={\n                <span className={classes.title}>\n                  {typeof job.company === 'string'\n                    ? job.company\n                    : job.company.name}\n                </span>\n              }\n              subheader={<span className={classes.subTitle}>{job.title}</span>}\n            />\n            <CardContent className={classes.cardContent}>\n              <span className={classes.createdAt}>\n                Added <Moment fromNow>{job.createdAt}</Moment>\n              </span>\n            </CardContent>\n          </CardContent>\n        </Card>\n      )}\n    </Draggable>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchDeleteJob: (job: IJob): ThunkVoidAction =>\n    dispatch(actions.deleteJob(job)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Job);\n","import * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../store/ducks';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  actions as boardColumnActions,\n  types as boardColumnTypes,\n} from '../../../../store/ducks/api/boardColumn';\nimport {\n  actions as jobActions,\n  types as jobTypes,\n} from '../../../../store/ducks/api/job';\nimport { createLoadingSelector } from '../../../../store/ducks/loading';\nimport { createErrorSelector } from '../../../../store/ducks/error';\nimport Loader from '../../../../components/Loader';\nimport { Redirect } from 'react-router-dom';\nimport BoardColumn from './BoardColumn';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport JobModal from './JobModal';\nimport Job from './Job';\nimport { IJob } from '../../../../store/models';\nimport { isEqual } from 'lodash';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(2),\n      marginBottom: 0,\n    },\n    wrapper: {\n      display: 'flex',\n      flexWrap: 'nowrap',\n      marginBottom: theme.spacing(3),\n    },\n    column: {\n      width: '370px',\n      flex: '0 0 auto',\n      marginRight: theme.spacing(2),\n    },\n  })\n);\nconst Board: React.FC<PropsFromRedux> = ({\n  selectedBoard,\n  jobs,\n  boardColumns,\n  loading,\n  error,\n  dispatchMoveJob,\n  dispatchMoveJobUI,\n  dispatchClearErrors,\n}) => {\n  const [jobModal, setJobModal] = React.useState<IJob | null>(null);\n  const classes = useStyles();\n\n  const handleDragEnd = (res: DropResult) => {\n    const { destination, source, draggableId } = res;\n    if (destination && !isEqual(source, destination)) {\n      const boardColumn = destination.droppableId;\n      const offset = destination.droppableId === source.droppableId ? 0 : -1;\n      const prevJobId =\n        destination.index > 0\n          ? jobs[boardColumn][destination.index + offset].id\n          : undefined;\n      dispatchMoveJobUI(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index\n      );\n      dispatchMoveJob(draggableId, boardColumn, prevJobId);\n    }\n  };\n\n  const memoJobModal = React.useMemo(\n    () => (\n      <JobModal\n        open={Boolean(jobModal)}\n        job={jobModal}\n        onClose={() => {\n          setJobModal(null);\n        }}\n      />\n    ),\n    [jobModal]\n  );\n\n  if (loading) {\n    return <Loader />;\n  } else if (selectedBoard === null) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <PerfectScrollbar>\n          <div className={classes.wrapper}>\n            <React.Fragment>{memoJobModal}</React.Fragment>\n            {boardColumns &&\n              boardColumns.length > 0 &&\n              boardColumns.map((boardColumn) => (\n                <div key={boardColumn.id} className={classes.column}>\n                  <BoardColumn\n                    boardColumn={boardColumn}\n                    jobCount={\n                      jobs && jobs[boardColumn.id]\n                        ? jobs[boardColumn.id].length\n                        : 0\n                    }\n                  >\n                    {jobs &&\n                      jobs[boardColumn.id] &&\n                      jobs[boardColumn.id].map((job: IJob, index: number) => (\n                        <div\n                          id={job.id}\n                          key={job.id}\n                          onClick={() => {\n                            setJobModal(job);\n                          }}\n                        >\n                          <Job job={job} index={index} />\n                        </div>\n                      ))}\n                  </BoardColumn>\n                </div>\n              ))}\n          </div>\n        </PerfectScrollbar>\n      </DragDropContext>\n    </div>\n  );\n};\n\nconst loadingSelector = createLoadingSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\nconst errorSelector = createErrorSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n  jobs: state.job.groupedJobs,\n  boardColumns: state.boardColumn.boardColumns,\n  loading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchMoveJob: (\n    id: string,\n    boardColumn: string,\n    prevJobId?: string\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJob(id, boardColumn, prevJobId)),\n  dispatchMoveJobUI: (\n    oldColumn: string,\n    newColumn: string,\n    oldIndex: number,\n    newIndex: number\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJobUI(oldColumn, newColumn, oldIndex, newIndex)),\n  dispatchClearErrors: (): ThunkVoidAction =>\n    dispatch(boardColumnActions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Board);\n"],"sourceRoot":""}