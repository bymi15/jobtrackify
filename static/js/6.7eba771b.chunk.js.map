{"version":3,"sources":["components/CompanyLogo.tsx","components/BoardColumnSelect.tsx","components/CompanySelect.tsx","views/pages/dashboard/board/AddJobDialog.tsx","views/pages/dashboard/board/BoardColumn.tsx","views/shared/JobModal/CompanyTab.tsx","views/shared/JobModal/JobInfoTab.tsx","views/shared/JobModal/NotesTab.tsx","views/shared/JobModal/index.tsx","views/pages/dashboard/board/Job.tsx","views/pages/dashboard/board/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","sm","width","spacing","height","md","lg","xl","CompanyLogo","company","size","classes","sizeClass","name","aria-label","logo","className","alt","src","loadingSelector","createLoadingSelector","types","GET_BOARD_COLUMNS","errorSelector","createErrorSelector","connector","connect","state","boardColumns","boardColumn","loading","error","dispatch","dispatchGetBoardColumns","actions","getBoardColumns","dispatchClearErrors","clearErrors","handleSelect","defaultValue","React","showToast","Autocomplete","id","onChange","_event","newBoardColumn","getOptionSelected","option","value","getOptionLabel","title","options","renderInput","params","TextField","label","variant","InputProps","endAdornment","CircularProgress","color","fullWidth","SEARCH_COMPANIES","companies","dispatchSearchCompanies","query","searchCompanies","dispatchClearCompanies","clearCompanies","selectedCompany","setSelectedCompany","freeSolo","newCompany","onInputChange","trim","disableClearable","renderOption","style","marginLeft","industry","fontSize","placeholder","type","startAdornment","InputAdornment","position","marginTop","initialState","board","selectedBoard","dashboard","dispatchCreateJob","job","createJob","open","onClose","useCustomState","setState","Dialog","maxWidth","aria-labelledby","DialogTitle","DialogContent","autoFocus","margin","e","handleInputChange","val","undefined","companyCustom","DialogActions","Button","onClick","preventDefault","subTitle","marginBottom","column","scrollbar","BoardColumn","jobCount","children","openAddJob","setOpenAddJob","Card","CardContent","Typography","startIcon","droppableId","provided","droppableProps","ref","innerRef","editabletext","fontWeight","paddingTop","tabPanel","maxHeight","padding","paddingLeft","paddingRight","breakpoints","down","CompanyTab","Grid","container","Box","display","flexDirection","mt","mb","justifyContent","pl","description","item","readonly","rows","website","foundedYear","toString","headquarters","country","sizeRange","currentEmployeeEstimate","totalEmployeeEstimate","linkedInUrl","overflow","whiteSpace","textOverflow","Link","href","target","rel","fontFamily","textareaWrapper","dispatchUpdateJob","updateJob","companyName","handleSave","data","onSave","location","address","dateApplied","postUrl","note","textAlign","dispatchCreateNote","createNote","dispatchUpdateNote","updateNote","dispatchDeleteNote","deleteNote","notes","noteTextarea","setNoteTextarea","multiline","direction","alignItems","body","boardId","jobId","length","map","key","Paper","elevation","fromNow","createdAt","withStyles","root","closeButton","right","top","palette","grey","props","other","disableTypography","IconButton","TabPanel","index","role","hidden","a11yProps","dialogPaper","minHeight","minWidth","modalContent","paddingBottom","GET_NOTES_JOB","dispatchGetNotesByJob","getNotesByJob","tabValue","setTabValue","handleClose","hasCompanyData","paper","dividers","justify","Tabs","newValue","indicatorColor","textColor","Tab","Loader","customHeight","cursor","deleteIcon","opacity","transition","hiddenDeleteIcon","cardContent","float","dispatchDeleteJob","deleteJob","hovering","setHovering","confirmDialog","useConfirmDialog","a","stopPropagation","draggableId","onMouseEnter","onMouseLeave","draggableProps","dragHandleProps","CardHeader","avatar","action","subheader","wrapper","flexWrap","overFlowY","overflowX","flex","marginRight","boardColumnTypes","jobTypes","GET_JOBS_BOARD","jobs","groupedJobs","dispatchMoveJob","prevJobId","jobActions","moveJob","dispatchMoveJobUI","oldColumn","newColumn","oldIndex","newIndex","moveJobUI","boardColumnActions","jobModal","setJobModal","memoJobModal","Boolean","hasTopbar","to","onDragEnd","res","destination","source","isEqual","offset"],"mappings":"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","file":"static/js/6.7eba771b.chunk.js","sourcesContent":["import Avatar from '@material-ui/core/Avatar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { ICompany } from '../store/models';\nimport LetterAvatar from './LetterAvatar';\n\ninterface Props {\n  company: ICompany | string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n}\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    sm: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    md: {\n      width: theme.spacing(5),\n      height: theme.spacing(5),\n    },\n    lg: {\n      width: theme.spacing(7),\n      height: theme.spacing(7),\n    },\n    xl: {\n      width: theme.spacing(10),\n      height: theme.spacing(10),\n    },\n  })\n);\n\nconst CompanyLogo: React.FC<Props> = ({ company, size }) => {\n  const classes = useStyles();\n  const sizeClass = size && classes[size];\n\n  if (typeof company === 'string') {\n    return (\n      <LetterAvatar size={size} name={company} aria-label=\"company-logo\" />\n    );\n  } else {\n    return company && company.logo ? (\n      <Avatar className={sizeClass} alt=\"companylogo\" src={company.logo} />\n    ) : (\n      <LetterAvatar size={size} name={company.name} aria-label=\"company-logo\" />\n    );\n  }\n};\n\nexport default CompanyLogo;\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { RootState } from '../store/ducks';\nimport { actions, types } from '../store/ducks/api/boardColumn';\nimport { createErrorSelector } from '../store/ducks/error';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport { showToast } from '../utils/showToast';\nimport { IBoardColumn } from '../store/models';\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  handleSelect: (boardColumn: IBoardColumn | null) => void;\n  defaultValue?: IBoardColumn;\n}\n\nconst BoardColumnSelect: React.FC<Props> = ({\n  className,\n  handleSelect,\n  defaultValue,\n  boardColumns,\n  loading,\n  error,\n  dispatchGetBoardColumns,\n  dispatchClearErrors,\n}) => {\n  React.useEffect(() => {\n    if (boardColumns === null) {\n      dispatchGetBoardColumns();\n    }\n  }, [boardColumns, dispatchGetBoardColumns]);\n\n  if (error) {\n    showToast('Error', error, 'danger', dispatchClearErrors);\n  }\n\n  return (\n    <Autocomplete\n      id=\"boardcolumn-select\"\n      onChange={(_event: any, newBoardColumn: IBoardColumn | null) => {\n        handleSelect(newBoardColumn);\n      }}\n      defaultValue={defaultValue}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.title}\n      options={boardColumns || []}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Board Column\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_BOARD_COLUMNS]);\nconst errorSelector = createErrorSelector([types.GET_BOARD_COLUMNS]);\n\nconst mapStateToProps = (state: RootState) => ({\n  boardColumns: state.boardColumn.boardColumns,\n  loading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetBoardColumns: (): ThunkVoidAction =>\n    dispatch(actions.getBoardColumns()),\n  dispatchClearErrors: (): ThunkVoidAction => dispatch(actions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(BoardColumnSelect);\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../store/ducks';\nimport { ICompany } from '../store/models';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CompanyLogo from './CompanyLogo';\nimport { actions, types } from '../store/ducks/api/company';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  onChange: (company: ICompany | string | null) => void;\n}\n\nconst CompanySelect: React.FC<Props> = ({\n  className,\n  onChange,\n  companies,\n  loading,\n  dispatchSearchCompanies,\n  dispatchClearCompanies,\n}) => {\n  const [selectedCompany, setSelectedCompany] = React.useState<\n    ICompany | string | null\n  >(null);\n\n  const applyFilter = (query: string) => {\n    if (query.trim() === '') {\n      dispatchClearCompanies();\n    } else {\n      dispatchSearchCompanies(query);\n    }\n  };\n\n  return (\n    <Autocomplete\n      id=\"company-select\"\n      freeSolo\n      onChange={(_event: any, newCompany: ICompany | string) => {\n        if (typeof newCompany !== 'string') {\n          setSelectedCompany(newCompany);\n          onChange(newCompany);\n        }\n      }}\n      onInputChange={(_event: any, value: string) => {\n        applyFilter(value);\n        setSelectedCompany(value);\n        onChange(value);\n      }}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.name}\n      options={companies || []}\n      loading={loading}\n      disableClearable\n      renderOption={(option) => (\n        <React.Fragment>\n          <CompanyLogo company={option} />\n          <span style={{ marginLeft: '5px' }}>{option.name}</span>\n          {!!option.industry && (\n            <span\n              style={{ fontSize: '0.9rem', color: '#666', marginLeft: '5px' }}\n            >\n              • {option.industry}\n            </span>\n          )}\n        </React.Fragment>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Company\"\n          placeholder=\"Enter a company name...\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            type: 'search',\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                {!!selectedCompany && typeof selectedCompany !== 'string' ? (\n                  <CompanyLogo company={selectedCompany} />\n                ) : (\n                  <BusinessIcon />\n                )}\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <React.Fragment>\n                {loading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.SEARCH_COMPANIES]);\n\nconst mapStateToProps = (state: RootState) => ({\n  companies: state.company.companies,\n  loading: loadingSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchSearchCompanies: (query: string): ThunkVoidAction =>\n    dispatch(actions.searchCompanies(query)),\n  dispatchClearCompanies: (): ThunkVoidAction =>\n    dispatch(actions.clearCompanies()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(CompanySelect);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport BoardColumnSelect from '../../../../components/BoardColumnSelect';\nimport CompanySelect from '../../../../components/CompanySelect';\nimport { RootState } from '../../../../store/ducks';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { IBoardColumn, ICompany, IJobInput } from '../../../../store/models';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  handleInputChange,\n  useCustomState,\n} from '../../../../utils/customHooks';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    marginTop: {\n      marginTop: theme.spacing(3),\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  boardColumn: IBoardColumn;\n  onClose: () => void;\n}\n\nconst initialState: IJobInput = {\n  board: '',\n  title: '',\n  boardColumn: '',\n};\nconst AddJobDialog: React.FC<Props> = ({\n  open,\n  boardColumn,\n  onClose,\n  selectedBoard,\n  dispatchCreateJob,\n}) => {\n  const classes = useStyles();\n  const [state, setState] = useCustomState(initialState);\n  React.useEffect(() => {\n    if (open && !!selectedBoard && !!boardColumn) {\n      setState({ board: selectedBoard.id, boardColumn: boardColumn.id });\n    }\n  }, [boardColumn, open, selectedBoard, setState]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    dispatchCreateJob(state as IJobInput);\n    setState(initialState);\n    onClose();\n  };\n\n  const handleSelectCompany = (val: ICompany | string | null) => {\n    if (typeof val === 'string') {\n      setState({\n        company: undefined,\n        companyCustom: val,\n      });\n    } else {\n      setState({\n        company: (val && val.id) || '',\n        companyCustom: undefined,\n      });\n    }\n  };\n\n  const handleSelectBoardColumn = (boardColumn: IBoardColumn | null) => {\n    setState({\n      boardColumn: (boardColumn && boardColumn.id) || '',\n    });\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"sm\"\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Add Job</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          name=\"title\"\n          label=\"Job Title\"\n          type=\"text\"\n          onChange={(e) => {\n            handleInputChange(e, setState);\n          }}\n          fullWidth\n        />\n        <CompanySelect\n          className={classes.marginTop}\n          onChange={handleSelectCompany}\n        />\n        <BoardColumnSelect\n          className={classes.marginTop}\n          handleSelect={handleSelectBoardColumn}\n          defaultValue={boardColumn}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"default\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} color=\"primary\">\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchCreateJob: (job: IJobInput): ThunkVoidAction =>\n    dispatch(actions.createJob(job)),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(AddJobDialog);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Droppable, DroppableProvided } from 'react-beautiful-dnd';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { IBoardColumn } from '../../../../store/models';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddJobDialog from './AddJobDialog';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    title: {\n      fontSize: 16,\n    },\n    subTitle: {\n      fontSize: 14,\n      marginBottom: 12,\n    },\n    marginTop: {\n      marginTop: theme.spacing(1),\n    },\n    column: {\n      height: '65vh',\n      ...theme.scrollbar,\n    },\n  })\n);\n\ninterface Props {\n  boardColumn: IBoardColumn;\n  jobCount: number;\n  children: any;\n}\n\nconst BoardColumn: React.FC<Props> = ({ boardColumn, jobCount, children }) => {\n  const [openAddJob, setOpenAddJob] = React.useState<boolean>(false);\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AddJobDialog\n        open={openAddJob}\n        onClose={() => {\n          setOpenAddJob(false);\n        }}\n        boardColumn={boardColumn}\n      />\n      <Card>\n        <CardContent>\n          <Typography className={classes.title} color=\"textPrimary\">\n            {boardColumn.title}\n          </Typography>\n          <Typography className={classes.subTitle} color=\"textSecondary\">\n            {jobCount} job{jobCount !== 1 && 's'}\n          </Typography>\n          <Button\n            onClick={() => setOpenAddJob(true)}\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<AddIcon />}\n            fullWidth\n          >\n            ADD JOB\n          </Button>\n          <Droppable droppableId={boardColumn.id}>\n            {(provided: DroppableProvided) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                className={classes.marginTop}\n              >\n                <div className={classes.column}>\n                  {children}\n                  {provided.placeholder}\n                </div>\n              </div>\n            )}\n          </Droppable>\n        </CardContent>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default BoardColumn;\n","import * as React from 'react';\nimport Link from '@material-ui/core/Link';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport CompanyLogo from '../../../components/CompanyLogo';\nimport Typography from '@material-ui/core/Typography';\nimport { EditText, EditTextarea } from 'react-edit-text';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { ICompany } from '../../../store/models';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    editabletext: {\n      fontSize: '16px',\n      fontWeight: 400,\n    },\n    label: {\n      paddingTop: '6px',\n      fontSize: '16px',\n      fontWeight: 600,\n    },\n    tabPanel: {\n      maxHeight: '45vh',\n      padding: '5px',\n      paddingLeft: '25px',\n      paddingRight: '25px',\n      [theme.breakpoints.down('sm')]: {\n        maxHeight: '50vh',\n      },\n    },\n    scrollbar: {\n      height: '45vh',\n      ...theme.scrollbar,\n    },\n  })\n);\n\ninterface Props {\n  company: ICompany;\n}\n\nconst CompanyTab: React.FC<Props> = ({ company }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.scrollbar}>\n      <Grid container spacing={1} className={classes.tabPanel}>\n        <Grid container spacing={1}>\n          <Box display=\"flex\" flexDirection=\"row\" mt={2} mb={1}>\n            <CompanyLogo company={company} size=\"md\" />\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              pl={2}\n            >\n              <Typography color=\"textPrimary\" variant=\"h5\">\n                {company.name}\n              </Typography>\n            </Box>\n          </Box>\n        </Grid>\n        {company.description && (\n          <Grid container spacing={1}>\n            <Grid item sm={12}>\n              <EditTextarea\n                className={classes.editabletext}\n                value={company.description}\n                readonly\n                rows={4}\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.type && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Type:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.type}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.website && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Website:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.website}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.industry && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Industry:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.industry}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.foundedYear && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Founded:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.foundedYear.toString()}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.headquarters && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Headquarters:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.headquarters}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.country && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Country:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.country}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.sizeRange && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Company size:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.sizeRange + ' employees'}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.currentEmployeeEstimate && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Current employees:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.currentEmployeeEstimate + ' employees est.'}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.totalEmployeeEstimate && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                Total employees:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <EditText\n                className={classes.editabletext}\n                value={company.totalEmployeeEstimate + ' employees est.'}\n                readonly\n              />\n            </Grid>\n          </Grid>\n        )}\n        {company.linkedInUrl && (\n          <Grid container spacing={1}>\n            <Grid item sm={4}>\n              <Typography color=\"textPrimary\" className={classes.label}>\n                LinkedIn Page:\n              </Typography>\n            </Grid>\n            <Grid item sm={8}>\n              <Typography\n                className={classes.label}\n                style={{\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  textOverflow: 'ellipsis',\n                }}\n              >\n                <Link\n                  href={'https://' + company.linkedInUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  https://{company.linkedInUrl}\n                </Link>\n              </Typography>\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n};\n\nexport default CompanyTab;\n","import Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as React from 'react';\nimport { EditText, EditTextarea, onSaveProps } from 'react-edit-text';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { actions } from '../../../store/ducks/api/job';\nimport { IJob, IJobUpdate } from '../../../store/models';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../store/types';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    tabPanel: {\n      maxHeight: '45vh',\n      padding: '5px',\n      paddingLeft: '25px',\n      paddingRight: '25px',\n      [theme.breakpoints.down('sm')]: {\n        maxHeight: '50vh',\n      },\n    },\n    editabletext: {\n      fontFamily: 'Roboto',\n      fontSize: '16px',\n      fontWeight: 400,\n    },\n    label: {\n      paddingTop: '6px',\n      fontSize: '16px',\n      fontWeight: 600,\n    },\n    textareaWrapper: {\n      paddingTop: '10px !important',\n    },\n    scrollbar: {\n      height: '45vh',\n      ...theme.scrollbar,\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  job: IJob;\n}\n\nconst JobInfoTab: React.FC<Props> = ({ job, dispatchUpdateJob }) => {\n  const classes = useStyles();\n  const companyName = !!job\n    ? typeof job.company === 'string'\n      ? job.company\n      : job.company.name\n    : '';\n\n  const handleSave = (data: onSaveProps) => {\n    const { name, value } = data;\n    if (job) {\n      dispatchUpdateJob(job.id, { [name]: value });\n    }\n  };\n\n  const handleSaveAddress = (data: onSaveProps) => {\n    const { value } = data;\n    if (job) {\n      dispatchUpdateJob(job.id, { location: { address: value } });\n    }\n  };\n\n  return (\n    <div className={classes.scrollbar}>\n      <Grid className={classes.tabPanel} container spacing={1}>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography className={classes.label}>Company:</Typography>\n          </Grid>\n          <Grid item sm={9}>\n            <EditText\n              className={classes.editabletext}\n              value={companyName}\n              readonly\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography className={classes.label}>Job Title:</Typography>\n          </Grid>\n          <Grid item sm={9}>\n            <EditText\n              className={classes.editabletext}\n              name=\"title\"\n              value={job.title}\n              placeholder=\"Enter a value\"\n              onSave={handleSave}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography className={classes.label}>Address:</Typography>\n          </Grid>\n          <Grid item sm={9}>\n            <EditText\n              className={classes.editabletext}\n              name=\"address\"\n              value={job.location && job.location.address}\n              placeholder=\"Enter a value\"\n              onSave={handleSaveAddress}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography className={classes.label}>Date Applied:</Typography>\n          </Grid>\n          <Grid item sm={9}>\n            <EditText\n              type=\"date\"\n              className={classes.editabletext}\n              name=\"dateApplied\"\n              value={job.dateApplied}\n              placeholder=\"Enter a value\"\n              onSave={handleSave}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography className={classes.label}>Post URL:</Typography>\n          </Grid>\n          <Grid item sm={9}>\n            <EditText\n              className={classes.editabletext}\n              name=\"postUrl\"\n              value={job.postUrl}\n              placeholder=\"Enter a value\"\n              onSave={handleSave}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item sm={3}>\n            <Typography\n              className={classes.label}\n              style={{ paddingTop: '12px' }}\n            >\n              Description:\n            </Typography>\n          </Grid>\n          <Grid item sm={9} className={classes.textareaWrapper}>\n            <EditTextarea\n              name=\"description\"\n              className={classes.editabletext}\n              value={job.description}\n              placeholder=\"Enter a value\"\n              onSave={handleSave}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchUpdateJob: (id: string, job: IJobUpdate): ThunkVoidAction =>\n    dispatch(actions.updateJob(id, job)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(JobInfoTab);\n","import * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { IJob, INote, INoteInput, INoteUpdate } from '../../../store/models';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { showToast } from '../../../utils/showToast';\nimport Paper from '@material-ui/core/Paper';\nimport Moment from 'react-moment';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { actions } from '../../../store/ducks/api/note';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    tabPanel: {\n      maxHeight: '45vh',\n      padding: '5px',\n      paddingLeft: '25px',\n      paddingRight: '25px',\n      [theme.breakpoints.down('sm')]: {\n        maxHeight: '50vh',\n      },\n    },\n    note: {\n      padding: theme.spacing(2),\n      '& div:nth-child(1)': {\n        fontSize: '14px',\n      },\n      '& div:nth-child(2)': {\n        textAlign: 'right',\n        fontSize: '12px',\n        color: '#929292',\n        marginTop: theme.spacing(2),\n      },\n    },\n    paddingTop: {\n      paddingTop: theme.spacing(2),\n    },\n    marginTop: {\n      marginTop: theme.spacing(1),\n    },\n    scrollbar: {\n      height: '45vh',\n      ...theme.scrollbar,\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  job: IJob;\n  notes: INote[] | null;\n}\n\nconst NotesTab: React.FC<Props> = ({ job, notes, dispatchCreateNote }) => {\n  const classes = useStyles();\n  const [noteTextarea, setNoteTextarea] = React.useState('');\n\n  const handleChangeNote = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setNoteTextarea(e.target.value);\n  };\n\n  const handleSaveNote = () => {\n    if (noteTextarea.trim() !== '') {\n      dispatchCreateNote({\n        body: noteTextarea,\n        boardId: job.board.id,\n        jobId: job.id,\n      });\n      setNoteTextarea('');\n      showToast('Success!', 'Note has been added.', 'success');\n    } else {\n      showToast('Please try again', 'Note is empty.', 'warning');\n    }\n  };\n\n  return (\n    <div className={classes.scrollbar}>\n      <Grid className={classes.tabPanel} container spacing={1}>\n        <Grid container spacing={1}>\n          <Grid item sm={12} className={classes.marginTop}>\n            <TextField\n              fullWidth\n              id=\"outlined-multiline-static\"\n              label=\"Enter a note\"\n              multiline\n              rows={4}\n              onChange={handleChangeNote}\n              value={noteTextarea}\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} direction=\"column\" alignItems=\"flex-end\">\n          <Grid item sm={12} className={classes.marginTop}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleSaveNote}\n            >\n              Save Note\n            </Button>\n          </Grid>\n        </Grid>\n        <Grid className={classes.paddingTop} container spacing={1}>\n          {notes &&\n            notes.length > 0 &&\n            notes.map((note: INote) => (\n              <Grid item sm={12} key={note.id}>\n                <Paper className={classes.note} elevation={2}>\n                  <div>{note.body}</div>\n                  <div>\n                    <Moment fromNow>{note.createdAt}</Moment>\n                  </div>\n                </Paper>\n              </Grid>\n            ))}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchCreateNote: (note: INoteInput): ThunkVoidAction =>\n    dispatch(actions.createNote(note)),\n  dispatchUpdateNote: (id: string, note: INoteUpdate): ThunkVoidAction =>\n    dispatch(actions.updateNote(id, note)),\n  dispatchDeleteNote: (id: string): ThunkVoidAction =>\n    dispatch(actions.deleteNote(id)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(NotesTab);\n","import * as React from 'react';\nimport { ICompany, IJob } from '../../../store/models';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport CompanyLogo from '../../../components/CompanyLogo';\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport CompanyTab from './CompanyTab';\nimport JobInfoTab from './JobInfoTab';\nimport NotesTab from './NotesTab';\nimport { createLoadingSelector } from '../../../store/ducks/loading';\nimport { actions, types } from '../../../store/ducks/api/note';\nimport { RootState } from '../../../store/ducks';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Loader from '../../../components/Loader';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && <React.Fragment>{children}</React.Fragment>}\n    </div>\n  );\n};\n\nconst a11yProps = (index: any) => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  };\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    dialogPaper: {\n      minHeight: '75vh',\n      maxHeight: '75vh',\n      minWidth: '650px',\n      maxWidth: '650px',\n      [theme.breakpoints.down('sm')]: {\n        minHeight: '80vh',\n        maxHeight: '80vh',\n        minWidth: '80vw',\n        maxWidth: '80vw',\n      },\n    },\n    modalContent: {\n      paddingBottom: theme.spacing(4),\n    },\n    paddingBottom: {\n      paddingBottom: theme.spacing(2),\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  job: IJob | null;\n  onClose: () => void;\n}\n\nconst JobModal: React.FC<Props> = ({\n  open,\n  onClose,\n  job,\n  loading,\n  notes,\n  dispatchGetNotesByJob,\n}) => {\n  const classes = useStyles();\n  const [tabValue, setTabValue] = React.useState(0);\n\n  React.useEffect(() => {\n    if (job) {\n      dispatchGetNotesByJob(job.id);\n    }\n  }, [dispatchGetNotesByJob, job]);\n\n  const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleClose = () => {\n    setTabValue(0);\n    onClose();\n  };\n\n  const hasCompanyData = !!job ? typeof job.company !== 'string' : false;\n  let company: ICompany | null = null;\n  if (hasCompanyData) {\n    company = job && (job.company as ICompany);\n  }\n  const companyName = job\n    ? typeof job.company === 'string'\n      ? job.company\n      : job.company.name\n    : '';\n\n  return (\n    job && (\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"job-modal\"\n        classes={{ paper: classes.dialogPaper }}\n      >\n        <DialogTitle id=\"job-modal\" onClose={handleClose}>\n          {' '}\n        </DialogTitle>\n        <DialogContent className={classes.modalContent} dividers>\n          <Grid\n            className={classes.paddingBottom}\n            container\n            spacing={3}\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <CompanyLogo company={job.company} size=\"xl\" />\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\" color=\"textPrimary\">\n                {companyName}\n              </Typography>\n              <Typography variant=\"h6\" color=\"textSecondary\">\n                {job.title}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Tabs\n            className={classes.paddingBottom}\n            value={tabValue}\n            onChange={handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label=\"Job Info\" {...a11yProps(0)} />\n            <Tab label=\"Notes\" {...a11yProps(1)} />\n            {hasCompanyData && <Tab label=\"Company\" {...a11yProps(2)} />}\n          </Tabs>\n          <TabPanel value={tabValue} index={0}>\n            <JobInfoTab job={job} />\n          </TabPanel>\n          <TabPanel value={tabValue} index={1}>\n            {loading ? (\n              <Loader customHeight=\"40vh\" />\n            ) : (\n              <NotesTab notes={notes} job={job} />\n            )}\n          </TabPanel>\n          {hasCompanyData && !!company && (\n            <TabPanel value={tabValue} index={2}>\n              <CompanyTab company={company} />\n            </TabPanel>\n          )}\n        </DialogContent>\n      </Dialog>\n    )\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_NOTES_JOB]);\nconst mapStateToProps = (state: RootState) => ({\n  notes: state.note.notes,\n  loading: loadingSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetNotesByJob: (jobId: string): ThunkVoidAction =>\n    dispatch(actions.getNotesByJob(jobId)),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(JobModal);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Draggable, DraggableProvided } from 'react-beautiful-dnd';\nimport { IJob } from '../../../../store/models';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Moment from 'react-moment';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useConfirmDialog } from '../../../../utils/ConfirmDialogProvider';\nimport CompanyLogo from '../../../../components/CompanyLogo';\n\nconst useStyles = makeStyles({\n  root: {\n    cursor: 'grab',\n    marginBottom: '5px',\n  },\n  deleteIcon: {\n    opacity: 1,\n    transition: '0.3s',\n  },\n  hiddenDeleteIcon: {\n    opacity: 0,\n  },\n  title: {\n    fontSize: '16px',\n    fontWeight: 500,\n  },\n  subTitle: {\n    fontSize: '14px',\n  },\n  cardContent: {\n    padding: 0,\n  },\n  createdAt: {\n    float: 'right',\n    fontSize: '12px',\n    color: '#929292',\n    fontWeight: 200,\n  },\n});\n\ninterface Props extends PropsFromRedux {\n  job: IJob;\n  index: number;\n}\n\nconst Job: React.FC<Props> = ({ job, index, dispatchDeleteJob }) => {\n  const classes = useStyles();\n  const [hovering, setHovering] = React.useState(false);\n  const confirmDialog = useConfirmDialog();\n\n  const deleteJob = async (e: React.MouseEvent<{}, MouseEvent>, job: IJob) => {\n    e.stopPropagation();\n    const shouldDelete = await confirmDialog({\n      variant: 'danger',\n      title: 'Are you sure?',\n      description: 'Do you wish to delete the job?',\n    });\n    if (shouldDelete) {\n      dispatchDeleteJob(job);\n    }\n  };\n\n  return (\n    <Draggable draggableId={job.id} index={index}>\n      {(provided: DraggableProvided) => (\n        <Card\n          onMouseEnter={() => setHovering(true)}\n          onMouseLeave={() => setHovering(false)}\n          className={classes.root}\n          innerRef={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <CardContent>\n            <CardHeader\n              avatar={<CompanyLogo company={job.company} />}\n              action={\n                <IconButton\n                  className={\n                    hovering ? classes.deleteIcon : classes.hiddenDeleteIcon\n                  }\n                  aria-label=\"delete\"\n                  onClick={(e) => {\n                    deleteJob(e, job);\n                  }}\n                >\n                  <DeleteOutlineIcon />\n                </IconButton>\n              }\n              title={\n                <span className={classes.title}>\n                  {typeof job.company === 'string'\n                    ? job.company\n                    : job.company.name}\n                </span>\n              }\n              subheader={<span className={classes.subTitle}>{job.title}</span>}\n            />\n            <CardContent className={classes.cardContent}>\n              <span className={classes.createdAt}>\n                Added <Moment fromNow>{job.createdAt}</Moment>\n              </span>\n            </CardContent>\n          </CardContent>\n        </Card>\n      )}\n    </Draggable>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchDeleteJob: (job: IJob): ThunkVoidAction =>\n    dispatch(actions.deleteJob(job)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Job);\n","import * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../store/ducks';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  actions as boardColumnActions,\n  types as boardColumnTypes,\n} from '../../../../store/ducks/api/boardColumn';\nimport {\n  actions as jobActions,\n  types as jobTypes,\n} from '../../../../store/ducks/api/job';\nimport { createLoadingSelector } from '../../../../store/ducks/loading';\nimport { createErrorSelector } from '../../../../store/ducks/error';\nimport Loader from '../../../../components/Loader';\nimport { Redirect } from 'react-router-dom';\nimport BoardColumn from './BoardColumn';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport JobModal from '../../../shared/JobModal';\nimport Job from './Job';\nimport { IJob } from '../../../../store/models';\nimport { isEqual } from 'lodash';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(2),\n      marginBottom: 0,\n    },\n    wrapper: {\n      display: 'flex',\n      flexWrap: 'nowrap',\n      paddingBottom: '10px',\n      ...theme.scrollbar,\n      overFlowY: 'hidden',\n      overflowX: 'auto',\n    },\n    column: {\n      width: '370px',\n      flex: '0 0 auto',\n      marginRight: theme.spacing(2),\n    },\n  })\n);\nconst Board: React.FC<PropsFromRedux> = ({\n  selectedBoard,\n  jobs,\n  boardColumns,\n  loading,\n  error,\n  dispatchMoveJob,\n  dispatchMoveJobUI,\n  dispatchClearErrors,\n}) => {\n  const [jobModal, setJobModal] = React.useState<IJob | null>(null);\n  const classes = useStyles();\n\n  const handleDragEnd = (res: DropResult) => {\n    const { destination, source, draggableId } = res;\n    if (destination && !isEqual(source, destination)) {\n      const boardColumn = destination.droppableId;\n      const offset = destination.droppableId === source.droppableId ? 0 : -1;\n      const prevJobId =\n        destination.index > 0\n          ? jobs[boardColumn][destination.index + offset].id\n          : undefined;\n      dispatchMoveJobUI(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index\n      );\n      dispatchMoveJob(draggableId, boardColumn, prevJobId);\n    }\n  };\n\n  const memoJobModal = React.useMemo(\n    () => (\n      <JobModal\n        open={Boolean(jobModal)}\n        job={jobModal}\n        onClose={() => {\n          setJobModal(null);\n        }}\n      />\n    ),\n    [jobModal]\n  );\n\n  if (loading) {\n    return <Loader hasTopbar />;\n  } else if (selectedBoard === null) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <div className={classes.wrapper}>\n          <React.Fragment>{memoJobModal}</React.Fragment>\n          {boardColumns &&\n            boardColumns.length > 0 &&\n            boardColumns.map((boardColumn) => (\n              <div key={boardColumn.id} className={classes.column}>\n                <BoardColumn\n                  boardColumn={boardColumn}\n                  jobCount={\n                    jobs && jobs[boardColumn.id]\n                      ? jobs[boardColumn.id].length\n                      : 0\n                  }\n                >\n                  {jobs &&\n                    jobs[boardColumn.id] &&\n                    jobs[boardColumn.id].map((job: IJob, index: number) => (\n                      <div\n                        id={job.id}\n                        key={job.id}\n                        onClick={() => {\n                          setJobModal(job);\n                        }}\n                      >\n                        <Job job={job} index={index} />\n                      </div>\n                    ))}\n                </BoardColumn>\n              </div>\n            ))}\n        </div>\n      </DragDropContext>\n    </div>\n  );\n};\n\nconst loadingSelector = createLoadingSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\nconst errorSelector = createErrorSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n  jobs: state.job.groupedJobs,\n  boardColumns: state.boardColumn.boardColumns,\n  loading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchMoveJob: (\n    id: string,\n    boardColumn: string,\n    prevJobId?: string\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJob(id, boardColumn, prevJobId)),\n  dispatchMoveJobUI: (\n    oldColumn: string,\n    newColumn: string,\n    oldIndex: number,\n    newIndex: number\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJobUI(oldColumn, newColumn, oldIndex, newIndex)),\n  dispatchClearErrors: (): ThunkVoidAction =>\n    dispatch(boardColumnActions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Board);\n"],"sourceRoot":""}