{"version":3,"sources":["components/BoardColumnSelect.tsx","components/CompanyLogo.tsx","components/CompanySelect.tsx","views/pages/dashboard/board/AddJobDialog.tsx","views/pages/dashboard/board/BoardColumn.tsx","views/pages/dashboard/board/JobModal.tsx","views/pages/dashboard/board/Job.tsx","views/pages/dashboard/board/index.tsx"],"names":["loadingSelector","createLoadingSelector","types","GET_BOARD_COLUMNS","errorSelector","createErrorSelector","connector","connect","state","boardColumns","boardColumn","isLoading","error","dispatch","dispatchGetBoardColumns","actions","getBoardColumns","dispatchClearErrors","clearErrors","className","handleSelect","defaultValue","React","showToast","Autocomplete","id","onChange","_event","newBoardColumn","getOptionSelected","option","value","getOptionLabel","title","options","loading","renderInput","params","TextField","label","variant","InputProps","endAdornment","CircularProgress","color","size","fullWidth","useStyles","makeStyles","theme","createStyles","sm","width","spacing","height","lg","xl","CompanyLogo","company","classes","sizeClass","logo","Avatar","alt","src","LetterAvatar","name","aria-label","renderRow","props","data","index","style","top","OuterElementContext","OuterElementType","ref","outerProps","ListboxComponent","children","other","itemData","toArray","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","type","ListSubheader","gridRef","current","resetAfterIndex","useResetCache","Provider","map","reduce","a","b","outerElementType","innerElementType","overscanCount","renderGroup","key","component","group","GET_COMPANIES","companies","dispatchGetCompanies","getCompanies","selectedCompany","setSelectedCompany","newCompany","disableListWrap","placeholder","startAdornment","InputAdornment","position","marginTop","initialState","board","selectedBoard","dashboard","dispatchCreateJob","job","createJob","open","onClose","useCustomState","setState","Dialog","maxWidth","aria-labelledby","DialogTitle","DialogContent","autoFocus","margin","e","handleInputChange","DialogActions","Button","onClick","preventDefault","fontSize","subTitle","marginBottom","column","BoardColumn","jobCount","openAddJob","setOpenAddJob","Card","CardContent","Typography","startIcon","droppableId","provided","droppableProps","innerRef","withStyles","root","padding","closeButton","right","palette","grey","disableTypography","IconButton","TabPanel","role","hidden","a11yProps","modalContent","paddingBottom","paddingTop","fontWeight","editabletext","textareaWrapper","textarea","dispatchUpdateJob","updateJob","setValue","handleSave","dividers","Grid","container","direction","justify","alignItems","item","Tabs","newValue","indicatorColor","textColor","Tab","readonly","onSave","location","dateApplied","postUrl","multiline","rows","description","DialogContentText","cursor","deleteIcon","opacity","transition","hiddenDeleteIcon","cardContent","createdAt","float","dispatchDeleteJob","deleteJob","hovering","setHovering","confirmDialog","useConfirmDialog","stopPropagation","draggableId","onMouseEnter","onMouseLeave","draggableProps","dragHandleProps","CardHeader","avatar","action","subheader","fromNow","wrapper","display","flexWrap","flex","marginRight","boardColumnTypes","jobTypes","GET_JOBS_BOARD","jobs","groupedJobs","dispatchGetJobsByBoard","boardId","jobActions","getJobsByBoard","boardColumnActions","dispatchMoveJob","prevJobId","moveJob","dispatchMoveJobUI","oldColumn","newColumn","oldIndex","newIndex","moveJobUI","jobModal","setJobModal","memoJobModal","Boolean","Loader","to","onDragEnd","res","destination","source","isEqual","offset","undefined"],"mappings":"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","file":"static/js/6.a9f46121.chunk.js","sourcesContent":["import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { RootState } from '../store/ducks';\nimport { actions, types } from '../store/ducks/api/boardColumn';\nimport { createErrorSelector } from '../store/ducks/error';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport { showToast } from '../utils/showToast';\nimport { IBoardColumn } from '../store/models';\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  handleSelect: (boardColumn: IBoardColumn | null) => void;\n  defaultValue?: IBoardColumn;\n}\n\nconst BoardColumnSelect: React.FC<Props> = ({\n  className,\n  handleSelect,\n  defaultValue,\n  boardColumns,\n  isLoading,\n  error,\n  dispatchGetBoardColumns,\n  dispatchClearErrors,\n}) => {\n  React.useEffect(() => {\n    if (boardColumns === null) {\n      dispatchGetBoardColumns();\n    }\n  }, [boardColumns, dispatchGetBoardColumns]);\n\n  if (error) {\n    showToast('Error', error, 'danger', dispatchClearErrors);\n  }\n\n  return (\n    <Autocomplete\n      id=\"boardcolumn-select\"\n      onChange={(_event: any, newBoardColumn: IBoardColumn | null) => {\n        handleSelect(newBoardColumn);\n      }}\n      defaultValue={defaultValue}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.title}\n      options={boardColumns || []}\n      loading={isLoading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Board Column\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {isLoading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_BOARD_COLUMNS]);\nconst errorSelector = createErrorSelector([types.GET_BOARD_COLUMNS]);\n\nconst mapStateToProps = (state: RootState) => ({\n  boardColumns: state.boardColumn.boardColumns,\n  isLoading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetBoardColumns: (): ThunkVoidAction =>\n    dispatch(actions.getBoardColumns()),\n  dispatchClearErrors: (): ThunkVoidAction => dispatch(actions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(BoardColumnSelect);\n","import Avatar from '@material-ui/core/Avatar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { ICompany } from '../store/models';\nimport LetterAvatar from './LetterAvatar';\n\ninterface Props {\n  company: ICompany;\n  size?: 'sm' | 'lg' | 'xl';\n}\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    sm: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    lg: {\n      width: theme.spacing(7),\n      height: theme.spacing(7),\n    },\n    xl: {\n      width: theme.spacing(10),\n      height: theme.spacing(10),\n    },\n  })\n);\n\nconst CompanyLogo: React.FC<Props> = ({ company, size }) => {\n  const classes = useStyles();\n  const sizeClass = size && classes[size];\n\n  return company && company.logo ? (\n    <Avatar className={sizeClass} alt=\"companylogo\" src={company.logo} />\n  ) : (\n    <LetterAvatar size={size} name={company.name} aria-label=\"company-logo\" />\n  );\n};\n\nexport default CompanyLogo;\n","import * as React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, {\n  AutocompleteRenderGroupParams,\n} from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../store/types';\nimport { RootState } from '../store/ducks';\nimport { actions, types } from '../store/ducks/api/company';\nimport { createErrorSelector } from '../store/ducks/error';\nimport { createLoadingSelector } from '../store/ducks/loading';\nimport { showToast } from '../utils/showToast';\nimport { ICompany } from '../store/models';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CompanyLogo from './CompanyLogo';\nimport { VariableSizeList, ListChildComponentProps } from 'react-window';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ListSubheader from '@material-ui/core/ListSubheader';\n\nconst LISTBOX_PADDING = 8; // px\n\nconst renderRow = (props: ListChildComponentProps) => {\n  const { data, index, style } = props;\n  return React.cloneElement(data[index], {\n    style: {\n      ...style,\n      top: (style.top as number) + LISTBOX_PADDING,\n    },\n  });\n};\n\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef<HTMLDivElement>((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return <div ref={ref} {...props} {...outerProps} />;\n});\n\nfunction useResetCache(data: any) {\n  const ref = React.useRef<VariableSizeList>(null);\n  React.useEffect(() => {\n    if (ref.current != null) {\n      ref.current.resetAfterIndex(0, true);\n    }\n  }, [data]);\n  return ref;\n}\n\n// Adapter for react-window\nconst ListboxComponent = React.forwardRef<HTMLDivElement>(\n  function ListboxComponent(props, ref) {\n    const { children, ...other } = props;\n    const itemData = React.Children.toArray(children);\n    const theme = useTheme();\n    const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\n    const itemCount = itemData.length;\n    const itemSize = smUp ? 36 : 48;\n\n    const getChildSize = (child: React.ReactNode) => {\n      if (React.isValidElement(child) && child.type === ListSubheader) {\n        return 48;\n      }\n\n      return itemSize;\n    };\n\n    const getHeight = () => {\n      if (itemCount > 8) {\n        return 8 * itemSize;\n      }\n      return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n    };\n\n    const gridRef = useResetCache(itemCount);\n\n    return (\n      <div ref={ref}>\n        <OuterElementContext.Provider value={other}>\n          <VariableSizeList\n            itemData={itemData}\n            height={getHeight() + 2 * LISTBOX_PADDING}\n            width=\"100%\"\n            ref={gridRef}\n            outerElementType={OuterElementType}\n            innerElementType=\"ul\"\n            itemSize={(index) => getChildSize(itemData[index])}\n            overscanCount={5}\n            itemCount={itemCount}\n          >\n            {renderRow}\n          </VariableSizeList>\n        </OuterElementContext.Provider>\n      </div>\n    );\n  }\n);\n\nconst renderGroup = (params: AutocompleteRenderGroupParams) => [\n  <ListSubheader key={params.key} component=\"div\">\n    {params.group}\n  </ListSubheader>,\n  params.children,\n];\n\ninterface Props extends PropsFromRedux {\n  className?: string;\n  handleSelect: (company: ICompany | null) => void;\n}\n\nconst CompanySelect: React.FC<Props> = ({\n  className,\n  handleSelect,\n  companies,\n  isLoading,\n  error,\n  dispatchGetCompanies,\n  dispatchClearErrors,\n}) => {\n  const [selectedCompany, setSelectedCompany] = React.useState<ICompany | null>(\n    null\n  );\n  React.useEffect(() => {\n    if (companies === null) {\n      dispatchGetCompanies();\n    }\n  }, [companies, dispatchGetCompanies]);\n\n  if (error) {\n    showToast('Error', error, 'danger', dispatchClearErrors);\n  }\n\n  return (\n    <Autocomplete\n      id=\"company-select\"\n      onChange={(_event: any, newCompany: ICompany | null) => {\n        setSelectedCompany(newCompany);\n        handleSelect(newCompany);\n      }}\n      getOptionSelected={(option, value) => option.id === value.id}\n      getOptionLabel={(option) => option.name}\n      options={companies || []}\n      loading={isLoading}\n      disableListWrap\n      ListboxComponent={\n        ListboxComponent as React.ComponentType<\n          React.HTMLAttributes<HTMLElement>\n        >\n      }\n      renderGroup={renderGroup}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          className={className}\n          label=\"Company\"\n          placeholder=\"Select a company...\"\n          variant=\"outlined\"\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                {!!selectedCompany ? (\n                  <CompanyLogo company={selectedCompany} />\n                ) : (\n                  <BusinessIcon />\n                )}\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <React.Fragment>\n                {isLoading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n      fullWidth\n    />\n  );\n};\n\nconst loadingSelector = createLoadingSelector([types.GET_COMPANIES]);\nconst errorSelector = createErrorSelector([types.GET_COMPANIES]);\n\nconst mapStateToProps = (state: RootState) => ({\n  companies: state.company.companies,\n  isLoading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetCompanies: (): ThunkVoidAction => dispatch(actions.getCompanies()),\n  dispatchClearErrors: (): ThunkVoidAction => dispatch(actions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(CompanySelect);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport BoardColumnSelect from '../../../../components/BoardColumnSelect';\nimport CompanySelect from '../../../../components/CompanySelect';\nimport { RootState } from '../../../../store/ducks';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { IBoardColumn, ICompany, IJobInput } from '../../../../store/models';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  handleInputChange,\n  useCustomState,\n} from '../../../../utils/customHooks';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    marginTop: {\n      marginTop: theme.spacing(3),\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  boardColumn: IBoardColumn;\n  onClose: () => void;\n}\n\nconst initialState: IJobInput = {\n  board: '',\n  company: '',\n  title: '',\n  boardColumn: '',\n};\nconst AddJobDialog: React.FC<Props> = ({\n  open,\n  boardColumn,\n  onClose,\n  selectedBoard,\n  dispatchCreateJob,\n}) => {\n  const classes = useStyles();\n  const [state, setState] = useCustomState(initialState);\n  React.useEffect(() => {\n    if (open && !!selectedBoard && !!boardColumn) {\n      setState({ board: selectedBoard.id, boardColumn: boardColumn.id });\n    }\n  }, [boardColumn, open, selectedBoard, setState]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    dispatchCreateJob(state as IJobInput);\n    setState(initialState);\n    onClose();\n  };\n\n  const handleSelectCompany = (company: ICompany | null) => {\n    setState({\n      company: (company && company.id) || '',\n    });\n  };\n\n  const handleSelectBoardColumn = (boardColumn: IBoardColumn | null) => {\n    setState({\n      boardColumn: (boardColumn && boardColumn.id) || '',\n    });\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"sm\"\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">Add Job</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          name=\"title\"\n          label=\"Job Title\"\n          type=\"text\"\n          onChange={(e) => {\n            handleInputChange(e, setState);\n          }}\n          fullWidth\n        />\n        <CompanySelect\n          className={classes.marginTop}\n          handleSelect={handleSelectCompany}\n        />\n        <BoardColumnSelect\n          className={classes.marginTop}\n          handleSelect={handleSelectBoardColumn}\n          defaultValue={boardColumn}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"default\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} color=\"primary\">\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchCreateJob: (job: IJobInput): ThunkVoidAction =>\n    dispatch(actions.createJob(job)),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(AddJobDialog);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Droppable, DroppableProvided } from 'react-beautiful-dnd';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { IBoardColumn } from '../../../../store/models';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddJobDialog from './AddJobDialog';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    title: {\n      fontSize: 16,\n    },\n    subTitle: {\n      fontSize: 14,\n      marginBottom: 12,\n    },\n    marginTop: {\n      marginTop: theme.spacing(1),\n    },\n    column: {\n      height: '65vh',\n    },\n  })\n);\n\ninterface Props {\n  boardColumn: IBoardColumn;\n  jobCount: number;\n  children: any;\n}\n\nconst BoardColumn: React.FC<Props> = ({ boardColumn, jobCount, children }) => {\n  const [openAddJob, setOpenAddJob] = React.useState<boolean>(false);\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <AddJobDialog\n        open={openAddJob}\n        onClose={() => {\n          setOpenAddJob(false);\n        }}\n        boardColumn={boardColumn}\n      />\n      <Card>\n        <CardContent>\n          <Typography className={classes.title} color=\"textPrimary\">\n            {boardColumn.title}\n          </Typography>\n          <Typography className={classes.subTitle} color=\"textSecondary\">\n            {jobCount} job{jobCount !== 1 && 's'}\n          </Typography>\n          <Button\n            onClick={() => setOpenAddJob(true)}\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<AddIcon />}\n            fullWidth\n          >\n            ADD JOB\n          </Button>\n          <Droppable droppableId={boardColumn.id}>\n            {(provided: DroppableProvided) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                className={classes.marginTop}\n              >\n                <PerfectScrollbar>\n                  <div className={classes.column}>\n                    {children}\n                    {provided.placeholder}\n                  </div>\n                </PerfectScrollbar>\n              </div>\n            )}\n          </Droppable>\n        </CardContent>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default BoardColumn;\n","import * as React from 'react';\nimport { IJob } from '../../../../store/models';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Grid from '@material-ui/core/Grid';\nimport CompanyLogo from '../../../../components/CompanyLogo';\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport EditText, { onSaveProps } from 'react-edit-text';\nimport TextField from '@material-ui/core/TextField';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { IJobUpdate } from '../../../../store/models/IJob';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && <React.Fragment>{children}</React.Fragment>}\n    </div>\n  );\n};\n\nconst a11yProps = (index: any) => {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  };\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      marginBottom: theme.spacing(2),\n    },\n    modalContent: {\n      paddingBottom: theme.spacing(4),\n    },\n    label: {\n      paddingTop: '6px',\n      fontSize: '16px',\n      fontWeight: 600,\n    },\n    editabletext: {\n      fontSize: '16px',\n      fontWeight: 400,\n    },\n    textareaWrapper: {\n      paddingTop: '10px !important',\n    },\n    textarea: {\n      padding: theme.spacing(1),\n      fontWeight: 400,\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  open: boolean;\n  job: IJob | null;\n  onClose: () => void;\n}\n\nconst JobModal: React.FC<Props> = ({\n  open,\n  onClose,\n  job,\n  dispatchUpdateJob,\n}) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (_event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleSave = (data: onSaveProps) => {\n    const { name, value } = data;\n    if (job) {\n      dispatchUpdateJob(job.id, { [name]: value });\n    }\n  };\n\n  return (\n    job && (\n      <Dialog open={open} onClose={onClose} aria-labelledby=\"job-modal\">\n        <DialogTitle id=\"job-modal\" onClose={onClose}>\n          {job.company.name}\n        </DialogTitle>\n        <DialogContent className={classes.modalContent} dividers>\n          <Grid\n            className={classes.root}\n            container\n            spacing={3}\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <CompanyLogo company={job.company} size=\"xl\" />\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\" color=\"textPrimary\">\n                {job.company.name}\n              </Typography>\n              <Typography variant=\"h6\" color=\"textSecondary\">\n                {job.title}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Tabs\n            className={classes.root}\n            value={value}\n            onChange={handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            variant=\"fullWidth\"\n          >\n            <Tab label=\"Info\" {...a11yProps(0)} />\n            <Tab label=\"Notes\" {...a11yProps(1)} />\n            <Tab label=\"Interviews\" {...a11yProps(2)} />\n          </Tabs>\n          <TabPanel value={value} index={0}>\n            <Grid container spacing={1}>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Company:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    value={job.company.name}\n                    readonly\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Job Title:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"title\"\n                    value={job.title}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Location:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"location\"\n                    value={job.location}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>\n                    Date Applied:\n                  </Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"dateApplied\"\n                    value={job.dateApplied}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>Post URL:</Typography>\n                </Grid>\n                <Grid item sm={9}>\n                  <EditText\n                    className={classes.editabletext}\n                    name=\"postUrl\"\n                    value={job.postUrl}\n                    placeholder=\"Enter a value\"\n                    onSave={handleSave}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={1}>\n                <Grid item sm={3}>\n                  <Typography className={classes.label}>\n                    Description:\n                  </Typography>\n                </Grid>\n                <Grid item sm={9} className={classes.textareaWrapper}>\n                  <TextField\n                    InputProps={{ className: classes.textarea }}\n                    id=\"outlined-multiline-static\"\n                    multiline\n                    fullWidth\n                    rows={4}\n                    value={job.description}\n                    placeholder=\"Enter a value\"\n                    variant=\"outlined\"\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <DialogContentText>\n              Notes section under development\n            </DialogContentText>\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <DialogContentText>\n              Interviews section under development\n            </DialogContentText>\n          </TabPanel>\n        </DialogContent>\n      </Dialog>\n    )\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchUpdateJob: (id: string, job: IJobUpdate): ThunkVoidAction =>\n    dispatch(actions.updateJob(id, job)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(JobModal);\n","import * as React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Draggable, DraggableProvided } from 'react-beautiful-dnd';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport { IJob } from '../../../../store/models';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Moment from 'react-moment';\nimport { actions } from '../../../../store/ducks/api/job';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useConfirmDialog } from '../../../../utils/ConfirmDialogProvider';\nimport CompanyLogo from '../../../../components/CompanyLogo';\n\nconst useStyles = makeStyles({\n  root: {\n    cursor: 'grab',\n  },\n  deleteIcon: {\n    opacity: 1,\n    transition: '0.3s',\n  },\n  hiddenDeleteIcon: {\n    opacity: 0,\n  },\n  title: {\n    fontSize: '16px',\n    fontWeight: 500,\n  },\n  subTitle: {\n    fontSize: '14px',\n  },\n  cardContent: {\n    padding: 0,\n  },\n  createdAt: {\n    float: 'right',\n    fontSize: '12px',\n    color: '#929292',\n    fontWeight: 200,\n  },\n});\n\ninterface Props extends PropsFromRedux {\n  job: IJob;\n  index: number;\n}\n\nconst Job: React.FC<Props> = ({ job, index, dispatchDeleteJob }) => {\n  const classes = useStyles();\n  const [hovering, setHovering] = React.useState(false);\n  const confirmDialog = useConfirmDialog();\n\n  const deleteJob = async (e: React.MouseEvent<{}, MouseEvent>, job: IJob) => {\n    e.stopPropagation();\n    const shouldDelete = await confirmDialog({\n      variant: 'danger',\n      title: 'Are you sure?',\n      description: 'Do you wish to delete the job?',\n    });\n    if (shouldDelete) {\n      dispatchDeleteJob(job.id);\n    }\n  };\n\n  return (\n    <Draggable draggableId={job.id} index={index}>\n      {(provided: DraggableProvided) => (\n        <Card\n          onMouseEnter={() => setHovering(true)}\n          onMouseLeave={() => setHovering(false)}\n          className={classes.root}\n          innerRef={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <CardContent>\n            <CardHeader\n              avatar={<CompanyLogo company={job.company} />}\n              action={\n                <IconButton\n                  className={\n                    hovering ? classes.deleteIcon : classes.hiddenDeleteIcon\n                  }\n                  aria-label=\"delete\"\n                  onClick={(e) => {\n                    deleteJob(e, job);\n                  }}\n                >\n                  <DeleteOutlineIcon />\n                </IconButton>\n              }\n              title={<span className={classes.title}>{job.company.name}</span>}\n              subheader={<span className={classes.subTitle}>{job.title}</span>}\n            />\n            <CardContent className={classes.cardContent}>\n              <span className={classes.createdAt}>\n                Added <Moment fromNow>{job.createdAt}</Moment>\n              </span>\n            </CardContent>\n          </CardContent>\n        </Card>\n      )}\n    </Draggable>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchDeleteJob: (id: string): ThunkVoidAction =>\n    dispatch(actions.deleteJob(id)),\n});\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Job);\n","import * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../store/ducks';\nimport { ThunkVoidAction, ThunkVoidDispatch } from '../../../../store/types';\nimport {\n  actions as boardColumnActions,\n  types as boardColumnTypes,\n} from '../../../../store/ducks/api/boardColumn';\nimport {\n  actions as jobActions,\n  types as jobTypes,\n} from '../../../../store/ducks/api/job';\nimport { createLoadingSelector } from '../../../../store/ducks/loading';\nimport { createErrorSelector } from '../../../../store/ducks/error';\nimport Loader from '../../../../components/Loader';\nimport { Redirect } from 'react-router-dom';\nimport BoardColumn from './BoardColumn';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport JobModal from './JobModal';\nimport Job from './Job';\nimport { IJob } from '../../../../store/models';\nimport { isEqual } from 'lodash';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(2),\n      marginBottom: 0,\n    },\n    wrapper: {\n      display: 'flex',\n      flexWrap: 'nowrap',\n      marginBottom: theme.spacing(3),\n    },\n    column: {\n      width: '370px',\n      flex: '0 0 auto',\n      marginRight: theme.spacing(2),\n    },\n  })\n);\nconst Board: React.FC<PropsFromRedux> = ({\n  selectedBoard,\n  jobs,\n  boardColumns,\n  isLoading,\n  error,\n  dispatchGetBoardColumns,\n  dispatchGetJobsByBoard,\n  dispatchMoveJob,\n  dispatchMoveJobUI,\n  dispatchClearErrors,\n}) => {\n  const [jobModal, setJobModal] = React.useState<IJob | null>(null);\n  const classes = useStyles();\n  React.useEffect(() => {\n    //TODO: cache jobs by board\n    if (selectedBoard) {\n      dispatchGetBoardColumns();\n      dispatchGetJobsByBoard(selectedBoard.id);\n    }\n  }, [dispatchGetBoardColumns, dispatchGetJobsByBoard, selectedBoard]);\n\n  const handleDragEnd = (res: DropResult) => {\n    const { destination, source, draggableId } = res;\n    if (destination && !isEqual(source, destination)) {\n      const boardColumn = destination.droppableId;\n      const offset = destination.droppableId === source.droppableId ? 0 : -1;\n      const prevJobId =\n        destination.index > 0\n          ? jobs[boardColumn][destination.index + offset].id\n          : undefined;\n      dispatchMoveJobUI(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index\n      );\n      dispatchMoveJob(draggableId, boardColumn, prevJobId);\n    }\n  };\n\n  const memoJobModal = React.useMemo(\n    () => (\n      <JobModal\n        open={Boolean(jobModal)}\n        job={jobModal}\n        onClose={() => {\n          setJobModal(null);\n        }}\n      />\n    ),\n    [jobModal]\n  );\n\n  if (isLoading) {\n    return <Loader />;\n  } else if (selectedBoard === null) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <PerfectScrollbar>\n          <div className={classes.wrapper}>\n            <React.Fragment>{memoJobModal}</React.Fragment>\n            {boardColumns &&\n              boardColumns.length > 0 &&\n              boardColumns.map((boardColumn) => (\n                <div key={boardColumn.id} className={classes.column}>\n                  <BoardColumn\n                    boardColumn={boardColumn}\n                    jobCount={\n                      jobs && jobs[boardColumn.id]\n                        ? jobs[boardColumn.id].length\n                        : 0\n                    }\n                  >\n                    {jobs &&\n                      jobs[boardColumn.id] &&\n                      jobs[boardColumn.id].map((job: IJob, index: number) => (\n                        <div\n                          id={job.id}\n                          key={job.id}\n                          onClick={() => {\n                            setJobModal(job);\n                          }}\n                        >\n                          <Job job={job} index={index} />\n                        </div>\n                      ))}\n                  </BoardColumn>\n                </div>\n              ))}\n          </div>\n        </PerfectScrollbar>\n      </DragDropContext>\n    </div>\n  );\n};\n\nconst loadingSelector = createLoadingSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\nconst errorSelector = createErrorSelector([\n  boardColumnTypes.GET_BOARD_COLUMNS,\n  jobTypes.GET_JOBS_BOARD,\n]);\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedBoard: state.dashboard.board,\n  jobs: state.job.groupedJobs,\n  boardColumns: state.boardColumn.boardColumns,\n  isLoading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkVoidDispatch) => ({\n  dispatchGetJobsByBoard: (boardId: string): ThunkVoidAction =>\n    dispatch(jobActions.getJobsByBoard(boardId)),\n  dispatchGetBoardColumns: (): ThunkVoidAction =>\n    dispatch(boardColumnActions.getBoardColumns()),\n  dispatchMoveJob: (\n    id: string,\n    boardColumn: string,\n    prevJobId?: string\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJob(id, boardColumn, prevJobId)),\n  dispatchMoveJobUI: (\n    oldColumn: string,\n    newColumn: string,\n    oldIndex: number,\n    newIndex: number\n  ): ThunkVoidAction =>\n    dispatch(jobActions.moveJobUI(oldColumn, newColumn, oldIndex, newIndex)),\n  dispatchClearErrors: (): ThunkVoidAction =>\n    dispatch(boardColumnActions.clearErrors()),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Board);\n"],"sourceRoot":""}