{"version":3,"sources":["components/CompanyLogo.tsx","views/pages/dashboard/map/Pin.tsx","utils/filterJobsForMap.ts","views/pages/dashboard/map/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","sm","width","spacing","height","md","lg","xl","CompanyLogo","company","size","classes","sizeClass","name","aria-label","logo","className","alt","src","typography","padding","display","popover","pointerEvents","Pin","job","lat","lng","React","anchorEl","setAnchorEl","handleClose","pinId","id","IconButton","onClick","onMouseEnter","event","currentTarget","onMouseLeave","Popover","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","disableRestoreFocus","Typography","inRange","x","min","max","filterJobsForMap","jobs","_","filter","location","root","connector","connect","state","center","zoom","filteredJobs","setFilteredJobs","options","maps","fullscreenControl","mapTypeControl","mapTypeId","MapTypeId","ROADMAP","scaleControl","scrollwheel","streetViewControl","bootstrapURLKeys","key","config","GOOGLE_API_KEY","defaultCenter","defaultZoom","map"],"mappings":"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","file":"static/js/8.11853261.chunk.js","sourcesContent":["import Avatar from '@material-ui/core/Avatar';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { ICompany } from '../store/models';\nimport LetterAvatar from './LetterAvatar';\n\ninterface Props {\n  company: ICompany | string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n}\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    sm: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    md: {\n      width: theme.spacing(5),\n      height: theme.spacing(5),\n    },\n    lg: {\n      width: theme.spacing(7),\n      height: theme.spacing(7),\n    },\n    xl: {\n      width: theme.spacing(10),\n      height: theme.spacing(10),\n    },\n  })\n);\n\nconst CompanyLogo: React.FC<Props> = ({ company, size }) => {\n  const classes = useStyles();\n  const sizeClass = size && classes[size];\n\n  if (typeof company === 'string') {\n    return (\n      <LetterAvatar size={size} name={company} aria-label=\"company-logo\" />\n    );\n  } else {\n    return company && company.logo ? (\n      <Avatar className={sizeClass} alt=\"companylogo\" src={company.logo} />\n    ) : (\n      <LetterAvatar size={size} name={company.name} aria-label=\"company-logo\" />\n    );\n  }\n};\n\nexport default CompanyLogo;\n","import * as React from 'react';\nimport Popover from '@material-ui/core/Popover';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CompanyLogo from '../../../../components/CompanyLogo';\nimport { IJob } from '../../../../store/models';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    typography: {\n      padding: theme.spacing(1),\n      display: 'inline-block',\n    },\n    popover: {\n      pointerEvents: 'none',\n    },\n  })\n);\n\ninterface Props {\n  job: IJob;\n  lat: number;\n  lng: number;\n}\n\nconst Pin: React.FC<Props> = ({ job, lat, lng }) => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\n    null\n  );\n\n  const handleClick = () => {\n    //TODO: open job modal\n    // console.log(job);\n  };\n\n  const handleMouseEnter = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const pinId = 'pin' + job.id;\n  return (\n    <div className=\"pin\">\n      <IconButton\n        aria-label=\"pin\"\n        onClick={handleClick}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleClose}\n      >\n        <CompanyLogo company={job.company} size=\"md\" />\n      </IconButton>\n      <Popover\n        className={classes.popover}\n        id={pinId}\n        open={Boolean(anchorEl)}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n        disableRestoreFocus\n      >\n        <Typography className={classes.typography}>\n          {typeof job.company === 'string' ? job.company : job.company.name}\n        </Typography>\n      </Popover>\n    </div>\n  );\n};\n\nexport default Pin;\n","import _ from 'lodash';\nimport { IJob } from '../store/models';\n\nconst inRange = (x: any, min: number, max: number) => x >= min && x <= max;\n\nconst filterJobsForMap = (jobs: IJob[]): IJob[] =>\n  _.filter(\n    jobs,\n    (job) =>\n      !!job.location &&\n      inRange(job.location.lat, -90, 90) &&\n      inRange(job.location.lng, -90, 90)\n  );\n\nexport default filterJobsForMap;\n","import * as React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport config from '../../../../config';\nimport { RootState } from '../../../../store/ducks';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Pin from './Pin';\nimport { IJob } from '../../../../store/models';\nimport filterJobsForMap from '../../../../utils/filterJobsForMap';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      height: 'calc(100vh - 64px - 83px)',\n      width: '100%',\n    },\n  })\n);\n\ninterface Props extends PropsFromRedux {\n  center?: {\n    lat: number;\n    lng: number;\n  };\n  zoom?: number;\n}\n\nconst Map: React.FC<Props> = ({\n  center = { lat: 51.5, lng: -0.1277 },\n  zoom = 10,\n  jobs,\n}) => {\n  const [filteredJobs, setFilteredJobs] = React.useState<IJob[]>([]);\n  React.useEffect(() => {\n    if (!!jobs) {\n      setFilteredJobs(filterJobsForMap(jobs));\n    }\n  }, [jobs]);\n  const classes = useStyles();\n\n  const getMapOptions = (maps: GoogleMapReact.Maps) => {\n    return {\n      fullscreenControl: true,\n      mapTypeControl: true,\n      mapTypeId: maps.MapTypeId.ROADMAP,\n      scaleControl: true,\n      scrollwheel: true,\n      streetViewControl: true,\n    };\n  };\n\n  return (\n    <div className={classes.root}>\n      <GoogleMapReact\n        options={getMapOptions}\n        bootstrapURLKeys={{\n          key: config.GOOGLE_API_KEY || '',\n        }}\n        defaultCenter={center}\n        defaultZoom={zoom}\n      >\n        {filteredJobs\n          ? filteredJobs.map(\n              (job: IJob) =>\n                job.location && (\n                  <Pin\n                    key={job.id}\n                    job={job}\n                    lat={job.location.lat}\n                    lng={job.location.lng}\n                  />\n                )\n            )\n          : null}\n      </GoogleMapReact>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  jobs: state.job.jobs,\n});\n\nconst connector = connect(mapStateToProps);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(Map);\n"],"sourceRoot":""}